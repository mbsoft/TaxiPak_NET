//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MPKService {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("envelope")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class envelope : global::System.Data.DataSet {
        
        private errorDataTable tableerror;
        
        private pingDataTable tableping;
        
        private location_requestDataTable tablelocation_request;
        
        private vehicleDataTable tablevehicle;
        
        private routeDataTable tableroute;
        
        private passengerDataTable tablepassenger;
        
        private stopDataTable tablestop;
        
        private addressDataTable tableaddress;
        
        private locationDataTable tablelocation;
        
        private estimated_lengthDataTable tableestimated_length;
        
        private capacity_needDataTable tablecapacity_need;
        
        private global::System.Data.DataRelation relationlocation_request_vehicle;
        
        private global::System.Data.DataRelation relationroute_passenger;
        
        private global::System.Data.DataRelation relationroute_stop;
        
        private global::System.Data.DataRelation relationstop_address;
        
        private global::System.Data.DataRelation relationstop_location;
        
        private global::System.Data.DataRelation relationroute_estimated_length;
        
        private global::System.Data.DataRelation relationroute_capacity_need;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public envelope() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected envelope(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["error"] != null)) {
                    base.Tables.Add(new errorDataTable(ds.Tables["error"]));
                }
                if ((ds.Tables["ping"] != null)) {
                    base.Tables.Add(new pingDataTable(ds.Tables["ping"]));
                }
                if ((ds.Tables["location_request"] != null)) {
                    base.Tables.Add(new location_requestDataTable(ds.Tables["location_request"]));
                }
                if ((ds.Tables["vehicle"] != null)) {
                    base.Tables.Add(new vehicleDataTable(ds.Tables["vehicle"]));
                }
                if ((ds.Tables["route"] != null)) {
                    base.Tables.Add(new routeDataTable(ds.Tables["route"]));
                }
                if ((ds.Tables["passenger"] != null)) {
                    base.Tables.Add(new passengerDataTable(ds.Tables["passenger"]));
                }
                if ((ds.Tables["stop"] != null)) {
                    base.Tables.Add(new stopDataTable(ds.Tables["stop"]));
                }
                if ((ds.Tables["address"] != null)) {
                    base.Tables.Add(new addressDataTable(ds.Tables["address"]));
                }
                if ((ds.Tables["location"] != null)) {
                    base.Tables.Add(new locationDataTable(ds.Tables["location"]));
                }
                if ((ds.Tables["estimated_length"] != null)) {
                    base.Tables.Add(new estimated_lengthDataTable(ds.Tables["estimated_length"]));
                }
                if ((ds.Tables["capacity_need"] != null)) {
                    base.Tables.Add(new capacity_needDataTable(ds.Tables["capacity_need"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public errorDataTable error {
            get {
                return this.tableerror;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pingDataTable ping {
            get {
                return this.tableping;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public location_requestDataTable location_request {
            get {
                return this.tablelocation_request;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vehicleDataTable vehicle {
            get {
                return this.tablevehicle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public routeDataTable route {
            get {
                return this.tableroute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public passengerDataTable passenger {
            get {
                return this.tablepassenger;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public stopDataTable stop {
            get {
                return this.tablestop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public addressDataTable address {
            get {
                return this.tableaddress;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public locationDataTable location {
            get {
                return this.tablelocation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public estimated_lengthDataTable estimated_length {
            get {
                return this.tableestimated_length;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public capacity_needDataTable capacity_need {
            get {
                return this.tablecapacity_need;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            envelope cln = ((envelope)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["error"] != null)) {
                    base.Tables.Add(new errorDataTable(ds.Tables["error"]));
                }
                if ((ds.Tables["ping"] != null)) {
                    base.Tables.Add(new pingDataTable(ds.Tables["ping"]));
                }
                if ((ds.Tables["location_request"] != null)) {
                    base.Tables.Add(new location_requestDataTable(ds.Tables["location_request"]));
                }
                if ((ds.Tables["vehicle"] != null)) {
                    base.Tables.Add(new vehicleDataTable(ds.Tables["vehicle"]));
                }
                if ((ds.Tables["route"] != null)) {
                    base.Tables.Add(new routeDataTable(ds.Tables["route"]));
                }
                if ((ds.Tables["passenger"] != null)) {
                    base.Tables.Add(new passengerDataTable(ds.Tables["passenger"]));
                }
                if ((ds.Tables["stop"] != null)) {
                    base.Tables.Add(new stopDataTable(ds.Tables["stop"]));
                }
                if ((ds.Tables["address"] != null)) {
                    base.Tables.Add(new addressDataTable(ds.Tables["address"]));
                }
                if ((ds.Tables["location"] != null)) {
                    base.Tables.Add(new locationDataTable(ds.Tables["location"]));
                }
                if ((ds.Tables["estimated_length"] != null)) {
                    base.Tables.Add(new estimated_lengthDataTable(ds.Tables["estimated_length"]));
                }
                if ((ds.Tables["capacity_need"] != null)) {
                    base.Tables.Add(new capacity_needDataTable(ds.Tables["capacity_need"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableerror = ((errorDataTable)(base.Tables["error"]));
            if ((initTable == true)) {
                if ((this.tableerror != null)) {
                    this.tableerror.InitVars();
                }
            }
            this.tableping = ((pingDataTable)(base.Tables["ping"]));
            if ((initTable == true)) {
                if ((this.tableping != null)) {
                    this.tableping.InitVars();
                }
            }
            this.tablelocation_request = ((location_requestDataTable)(base.Tables["location_request"]));
            if ((initTable == true)) {
                if ((this.tablelocation_request != null)) {
                    this.tablelocation_request.InitVars();
                }
            }
            this.tablevehicle = ((vehicleDataTable)(base.Tables["vehicle"]));
            if ((initTable == true)) {
                if ((this.tablevehicle != null)) {
                    this.tablevehicle.InitVars();
                }
            }
            this.tableroute = ((routeDataTable)(base.Tables["route"]));
            if ((initTable == true)) {
                if ((this.tableroute != null)) {
                    this.tableroute.InitVars();
                }
            }
            this.tablepassenger = ((passengerDataTable)(base.Tables["passenger"]));
            if ((initTable == true)) {
                if ((this.tablepassenger != null)) {
                    this.tablepassenger.InitVars();
                }
            }
            this.tablestop = ((stopDataTable)(base.Tables["stop"]));
            if ((initTable == true)) {
                if ((this.tablestop != null)) {
                    this.tablestop.InitVars();
                }
            }
            this.tableaddress = ((addressDataTable)(base.Tables["address"]));
            if ((initTable == true)) {
                if ((this.tableaddress != null)) {
                    this.tableaddress.InitVars();
                }
            }
            this.tablelocation = ((locationDataTable)(base.Tables["location"]));
            if ((initTable == true)) {
                if ((this.tablelocation != null)) {
                    this.tablelocation.InitVars();
                }
            }
            this.tableestimated_length = ((estimated_lengthDataTable)(base.Tables["estimated_length"]));
            if ((initTable == true)) {
                if ((this.tableestimated_length != null)) {
                    this.tableestimated_length.InitVars();
                }
            }
            this.tablecapacity_need = ((capacity_needDataTable)(base.Tables["capacity_need"]));
            if ((initTable == true)) {
                if ((this.tablecapacity_need != null)) {
                    this.tablecapacity_need.InitVars();
                }
            }
            this.relationlocation_request_vehicle = this.Relations["location_request_vehicle"];
            this.relationroute_passenger = this.Relations["route_passenger"];
            this.relationroute_stop = this.Relations["route_stop"];
            this.relationstop_address = this.Relations["stop_address"];
            this.relationstop_location = this.Relations["stop_location"];
            this.relationroute_estimated_length = this.Relations["route_estimated_length"];
            this.relationroute_capacity_need = this.Relations["route_capacity_need"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "envelope";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableerror = new errorDataTable();
            base.Tables.Add(this.tableerror);
            this.tableping = new pingDataTable();
            base.Tables.Add(this.tableping);
            this.tablelocation_request = new location_requestDataTable();
            base.Tables.Add(this.tablelocation_request);
            this.tablevehicle = new vehicleDataTable();
            base.Tables.Add(this.tablevehicle);
            this.tableroute = new routeDataTable();
            base.Tables.Add(this.tableroute);
            this.tablepassenger = new passengerDataTable();
            base.Tables.Add(this.tablepassenger);
            this.tablestop = new stopDataTable();
            base.Tables.Add(this.tablestop);
            this.tableaddress = new addressDataTable();
            base.Tables.Add(this.tableaddress);
            this.tablelocation = new locationDataTable();
            base.Tables.Add(this.tablelocation);
            this.tableestimated_length = new estimated_lengthDataTable();
            base.Tables.Add(this.tableestimated_length);
            this.tablecapacity_need = new capacity_needDataTable();
            base.Tables.Add(this.tablecapacity_need);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("location_request_vehicle", new global::System.Data.DataColumn[] {
                        this.tablelocation_request.location_request_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablevehicle.location_request_IdColumn});
            this.tablevehicle.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("route_passenger", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepassenger.route_IdColumn});
            this.tablepassenger.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("route_stop", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestop.route_IdColumn});
            this.tablestop.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("stop_address", new global::System.Data.DataColumn[] {
                        this.tablestop.stop_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaddress.stop_IdColumn});
            this.tableaddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("stop_location", new global::System.Data.DataColumn[] {
                        this.tablestop.stop_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablelocation.stop_IdColumn});
            this.tablelocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("route_estimated_length", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableestimated_length.route_IdColumn});
            this.tableestimated_length.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("route_capacity_need", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecapacity_need.route_IdColumn});
            this.tablecapacity_need.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationlocation_request_vehicle = new global::System.Data.DataRelation("location_request_vehicle", new global::System.Data.DataColumn[] {
                        this.tablelocation_request.location_request_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablevehicle.location_request_IdColumn}, false);
            this.relationlocation_request_vehicle.Nested = true;
            this.Relations.Add(this.relationlocation_request_vehicle);
            this.relationroute_passenger = new global::System.Data.DataRelation("route_passenger", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepassenger.route_IdColumn}, false);
            this.relationroute_passenger.Nested = true;
            this.Relations.Add(this.relationroute_passenger);
            this.relationroute_stop = new global::System.Data.DataRelation("route_stop", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestop.route_IdColumn}, false);
            this.relationroute_stop.Nested = true;
            this.Relations.Add(this.relationroute_stop);
            this.relationstop_address = new global::System.Data.DataRelation("stop_address", new global::System.Data.DataColumn[] {
                        this.tablestop.stop_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaddress.stop_IdColumn}, false);
            this.relationstop_address.Nested = true;
            this.Relations.Add(this.relationstop_address);
            this.relationstop_location = new global::System.Data.DataRelation("stop_location", new global::System.Data.DataColumn[] {
                        this.tablestop.stop_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablelocation.stop_IdColumn}, false);
            this.relationstop_location.Nested = true;
            this.Relations.Add(this.relationstop_location);
            this.relationroute_estimated_length = new global::System.Data.DataRelation("route_estimated_length", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableestimated_length.route_IdColumn}, false);
            this.relationroute_estimated_length.Nested = true;
            this.Relations.Add(this.relationroute_estimated_length);
            this.relationroute_capacity_need = new global::System.Data.DataRelation("route_capacity_need", new global::System.Data.DataColumn[] {
                        this.tableroute.route_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecapacity_need.route_IdColumn}, false);
            this.relationroute_capacity_need.Nested = true;
            this.Relations.Add(this.relationroute_capacity_need);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeerror() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeping() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializelocation_request() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevehicle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeroute() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepassenger() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestop() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaddress() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializelocation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeestimated_length() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecapacity_need() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            envelope ds = new envelope();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void errorRowChangeEventHandler(object sender, errorRowChangeEvent e);
        
        public delegate void pingRowChangeEventHandler(object sender, pingRowChangeEvent e);
        
        public delegate void location_requestRowChangeEventHandler(object sender, location_requestRowChangeEvent e);
        
        public delegate void vehicleRowChangeEventHandler(object sender, vehicleRowChangeEvent e);
        
        public delegate void routeRowChangeEventHandler(object sender, routeRowChangeEvent e);
        
        public delegate void passengerRowChangeEventHandler(object sender, passengerRowChangeEvent e);
        
        public delegate void stopRowChangeEventHandler(object sender, stopRowChangeEvent e);
        
        public delegate void addressRowChangeEventHandler(object sender, addressRowChangeEvent e);
        
        public delegate void locationRowChangeEventHandler(object sender, locationRowChangeEvent e);
        
        public delegate void estimated_lengthRowChangeEventHandler(object sender, estimated_lengthRowChangeEvent e);
        
        public delegate void capacity_needRowChangeEventHandler(object sender, capacity_needRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class errorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnmsgtype;
            
            private global::System.Data.DataColumn columnmessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorDataTable() {
                this.TableName = "error";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal errorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected errorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn msgtypeColumn {
                get {
                    return this.columnmsgtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn messageColumn {
                get {
                    return this.columnmessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow this[int index] {
                get {
                    return ((errorRow)(this.Rows[index]));
                }
            }
            
            public event errorRowChangeEventHandler errorRowChanging;
            
            public event errorRowChangeEventHandler errorRowChanged;
            
            public event errorRowChangeEventHandler errorRowDeleting;
            
            public event errorRowChangeEventHandler errorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdderrorRow(errorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow AdderrorRow(string msgtype, string message) {
                errorRow rowerrorRow = ((errorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        msgtype,
                        message};
                rowerrorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowerrorRow);
                return rowerrorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                errorDataTable cln = ((errorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new errorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmsgtype = base.Columns["msgtype"];
                this.columnmessage = base.Columns["message"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmsgtype = new global::System.Data.DataColumn("msgtype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmsgtype);
                this.columnmessage = new global::System.Data.DataColumn("message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmessage);
                this.columnmsgtype.AllowDBNull = false;
                this.columnmessage.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow NewerrorRow() {
                return ((errorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new errorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(errorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.errorRowChanged != null)) {
                    this.errorRowChanged(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.errorRowChanging != null)) {
                    this.errorRowChanging(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.errorRowDeleted != null)) {
                    this.errorRowDeleted(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.errorRowDeleting != null)) {
                    this.errorRowDeleting(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveerrorRow(errorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "errorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pingDataTable() {
                this.TableName = "ping";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pingRow this[int index] {
                get {
                    return ((pingRow)(this.Rows[index]));
                }
            }
            
            public event pingRowChangeEventHandler pingRowChanging;
            
            public event pingRowChangeEventHandler pingRowChanged;
            
            public event pingRowChangeEventHandler pingRowDeleting;
            
            public event pingRowChangeEventHandler pingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpingRow(pingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pingRow AddpingRow() {
                pingRow rowpingRow = ((pingRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowpingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpingRow);
                return rowpingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                pingDataTable cln = ((pingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new pingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pingRow NewpingRow() {
                return ((pingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new pingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(pingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pingRowChanged != null)) {
                    this.pingRowChanged(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pingRowChanging != null)) {
                    this.pingRowChanging(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pingRowDeleted != null)) {
                    this.pingRowDeleted(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pingRowDeleting != null)) {
                    this.pingRowDeleting(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepingRow(pingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class location_requestDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnlocation_request_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public location_requestDataTable() {
                this.TableName = "location_request";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal location_requestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected location_requestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_request_IdColumn {
                get {
                    return this.columnlocation_request_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public location_requestRow this[int index] {
                get {
                    return ((location_requestRow)(this.Rows[index]));
                }
            }
            
            public event location_requestRowChangeEventHandler location_requestRowChanging;
            
            public event location_requestRowChangeEventHandler location_requestRowChanged;
            
            public event location_requestRowChangeEventHandler location_requestRowDeleting;
            
            public event location_requestRowChangeEventHandler location_requestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addlocation_requestRow(location_requestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public location_requestRow Addlocation_requestRow() {
                location_requestRow rowlocation_requestRow = ((location_requestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowlocation_requestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowlocation_requestRow);
                return rowlocation_requestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                location_requestDataTable cln = ((location_requestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new location_requestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlocation_request_Id = base.Columns["location_request_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlocation_request_Id = new global::System.Data.DataColumn("location_request_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnlocation_request_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnlocation_request_Id}, true));
                this.columnlocation_request_Id.AutoIncrement = true;
                this.columnlocation_request_Id.AllowDBNull = false;
                this.columnlocation_request_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public location_requestRow Newlocation_requestRow() {
                return ((location_requestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new location_requestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(location_requestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.location_requestRowChanged != null)) {
                    this.location_requestRowChanged(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.location_requestRowChanging != null)) {
                    this.location_requestRowChanging(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.location_requestRowDeleted != null)) {
                    this.location_requestRowDeleted(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.location_requestRowDeleting != null)) {
                    this.location_requestRowDeleting(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removelocation_requestRow(location_requestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "location_requestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vehicleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnvehicle_Column;
            
            private global::System.Data.DataColumn columnlocation_request_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vehicleDataTable() {
                this.TableName = "vehicle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vehicleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected vehicleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vehicle_ColumnColumn {
                get {
                    return this.columnvehicle_Column;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_request_IdColumn {
                get {
                    return this.columnlocation_request_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vehicleRow this[int index] {
                get {
                    return ((vehicleRow)(this.Rows[index]));
                }
            }
            
            public event vehicleRowChangeEventHandler vehicleRowChanging;
            
            public event vehicleRowChangeEventHandler vehicleRowChanged;
            
            public event vehicleRowChangeEventHandler vehicleRowDeleting;
            
            public event vehicleRowChangeEventHandler vehicleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvehicleRow(vehicleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vehicleRow AddvehicleRow(string vehicle_Column, location_requestRow parentlocation_requestRowBylocation_request_vehicle) {
                vehicleRow rowvehicleRow = ((vehicleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        vehicle_Column,
                        null};
                if ((parentlocation_requestRowBylocation_request_vehicle != null)) {
                    columnValuesArray[1] = parentlocation_requestRowBylocation_request_vehicle[0];
                }
                rowvehicleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowvehicleRow);
                return rowvehicleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                vehicleDataTable cln = ((vehicleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new vehicleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvehicle_Column = base.Columns["vehicle_Column"];
                this.columnlocation_request_Id = base.Columns["location_request_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvehicle_Column = new global::System.Data.DataColumn("vehicle_Column", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnvehicle_Column);
                this.columnlocation_request_Id = new global::System.Data.DataColumn("location_request_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnlocation_request_Id);
                this.columnvehicle_Column.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vehicleRow NewvehicleRow() {
                return ((vehicleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new vehicleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(vehicleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vehicleRowChanged != null)) {
                    this.vehicleRowChanged(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vehicleRowChanging != null)) {
                    this.vehicleRowChanging(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vehicleRowDeleted != null)) {
                    this.vehicleRowDeleted(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vehicleRowDeleting != null)) {
                    this.vehicleRowDeleting(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevehicleRow(vehicleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vehicleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class routeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnmandatory;
            
            private global::System.Data.DataColumn columnprevious_route;
            
            private global::System.Data.DataColumn columnprice_group;
            
            private global::System.Data.DataColumn columnassign_before;
            
            private global::System.Data.DataColumn columnroute_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeDataTable() {
                this.TableName = "route";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal routeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected routeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mandatoryColumn {
                get {
                    return this.columnmandatory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn previous_routeColumn {
                get {
                    return this.columnprevious_route;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn price_groupColumn {
                get {
                    return this.columnprice_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assign_beforeColumn {
                get {
                    return this.columnassign_before;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow this[int index] {
                get {
                    return ((routeRow)(this.Rows[index]));
                }
            }
            
            public event routeRowChangeEventHandler routeRowChanging;
            
            public event routeRowChangeEventHandler routeRowChanged;
            
            public event routeRowChangeEventHandler routeRowDeleting;
            
            public event routeRowChangeEventHandler routeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrouteRow(routeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow AddrouteRow(string id, string version, string status, string mandatory, string previous_route, long price_group, System.DateTime assign_before) {
                routeRow rowrouteRow = ((routeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        version,
                        status,
                        mandatory,
                        previous_route,
                        price_group,
                        assign_before,
                        null};
                rowrouteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrouteRow);
                return rowrouteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                routeDataTable cln = ((routeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new routeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnversion = base.Columns["version"];
                this.columnstatus = base.Columns["status"];
                this.columnmandatory = base.Columns["mandatory"];
                this.columnprevious_route = base.Columns["previous_route"];
                this.columnprice_group = base.Columns["price_group"];
                this.columnassign_before = base.Columns["assign_before"];
                this.columnroute_Id = base.Columns["route_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstatus);
                this.columnmandatory = new global::System.Data.DataColumn("mandatory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmandatory);
                this.columnprevious_route = new global::System.Data.DataColumn("previous_route", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprevious_route);
                this.columnprice_group = new global::System.Data.DataColumn("price_group", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprice_group);
                this.columnassign_before = new global::System.Data.DataColumn("assign_before", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassign_before);
                this.columnroute_Id = new global::System.Data.DataColumn("route_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnroute_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnroute_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnstatus.AllowDBNull = false;
                this.columnstatus.Namespace = "";
                this.columnmandatory.AllowDBNull = false;
                this.columnroute_Id.AutoIncrement = true;
                this.columnroute_Id.AllowDBNull = false;
                this.columnroute_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow NewrouteRow() {
                return ((routeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new routeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(routeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.routeRowChanged != null)) {
                    this.routeRowChanged(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.routeRowChanging != null)) {
                    this.routeRowChanging(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.routeRowDeleted != null)) {
                    this.routeRowDeleted(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.routeRowDeleting != null)) {
                    this.routeRowDeleting(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverouteRow(routeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "routeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class passengerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnphone;
            
            private global::System.Data.DataColumn columnpromised_pickup;
            
            private global::System.Data.DataColumn columnextra_people;
            
            private global::System.Data.DataColumn columnpickup_note;
            
            private global::System.Data.DataColumn columndropoff_note;
            
            private global::System.Data.DataColumn columnpickup;
            
            private global::System.Data.DataColumn columndropoff;
            
            private global::System.Data.DataColumn columnroute_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public passengerDataTable() {
                this.TableName = "passenger";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal passengerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected passengerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn promised_pickupColumn {
                get {
                    return this.columnpromised_pickup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extra_peopleColumn {
                get {
                    return this.columnextra_people;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pickup_noteColumn {
                get {
                    return this.columnpickup_note;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dropoff_noteColumn {
                get {
                    return this.columndropoff_note;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pickupColumn {
                get {
                    return this.columnpickup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dropoffColumn {
                get {
                    return this.columndropoff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public passengerRow this[int index] {
                get {
                    return ((passengerRow)(this.Rows[index]));
                }
            }
            
            public event passengerRowChangeEventHandler passengerRowChanging;
            
            public event passengerRowChangeEventHandler passengerRowChanged;
            
            public event passengerRowChangeEventHandler passengerRowDeleting;
            
            public event passengerRowChangeEventHandler passengerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpassengerRow(passengerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public passengerRow AddpassengerRow(string id, string name, string phone, System.DateTime promised_pickup, string extra_people, string pickup_note, string dropoff_note, string pickup, string dropoff, routeRow parentrouteRowByroute_passenger) {
                passengerRow rowpassengerRow = ((passengerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        name,
                        phone,
                        promised_pickup,
                        extra_people,
                        pickup_note,
                        dropoff_note,
                        pickup,
                        dropoff,
                        null};
                if ((parentrouteRowByroute_passenger != null)) {
                    columnValuesArray[9] = parentrouteRowByroute_passenger[7];
                }
                rowpassengerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpassengerRow);
                return rowpassengerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                passengerDataTable cln = ((passengerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new passengerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columnphone = base.Columns["phone"];
                this.columnpromised_pickup = base.Columns["promised_pickup"];
                this.columnextra_people = base.Columns["extra_people"];
                this.columnpickup_note = base.Columns["pickup_note"];
                this.columndropoff_note = base.Columns["dropoff_note"];
                this.columnpickup = base.Columns["pickup"];
                this.columndropoff = base.Columns["dropoff"];
                this.columnroute_Id = base.Columns["route_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnphone = new global::System.Data.DataColumn("phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphone);
                this.columnpromised_pickup = new global::System.Data.DataColumn("promised_pickup", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpromised_pickup);
                this.columnextra_people = new global::System.Data.DataColumn("extra_people", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnextra_people);
                this.columnpickup_note = new global::System.Data.DataColumn("pickup_note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpickup_note);
                this.columndropoff_note = new global::System.Data.DataColumn("dropoff_note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndropoff_note);
                this.columnpickup = new global::System.Data.DataColumn("pickup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpickup);
                this.columndropoff = new global::System.Data.DataColumn("dropoff", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndropoff);
                this.columnroute_Id = new global::System.Data.DataColumn("route_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnroute_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnpickup.AllowDBNull = false;
                this.columndropoff.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public passengerRow NewpassengerRow() {
                return ((passengerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new passengerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(passengerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.passengerRowChanged != null)) {
                    this.passengerRowChanged(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.passengerRowChanging != null)) {
                    this.passengerRowChanging(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.passengerRowDeleted != null)) {
                    this.passengerRowDeleted(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.passengerRowDeleting != null)) {
                    this.passengerRowDeleting(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepassengerRow(passengerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "passengerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class stopDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnestimated_arrival;
            
            private global::System.Data.DataColumn columnstop_Id;
            
            private global::System.Data.DataColumn columnroute_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopDataTable() {
                this.TableName = "stop";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal stopDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected stopDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn estimated_arrivalColumn {
                get {
                    return this.columnestimated_arrival;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stop_IdColumn {
                get {
                    return this.columnstop_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRow this[int index] {
                get {
                    return ((stopRow)(this.Rows[index]));
                }
            }
            
            public event stopRowChangeEventHandler stopRowChanging;
            
            public event stopRowChangeEventHandler stopRowChanged;
            
            public event stopRowChangeEventHandler stopRowDeleting;
            
            public event stopRowChangeEventHandler stopRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstopRow(stopRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRow AddstopRow(string id, System.DateTime estimated_arrival, routeRow parentrouteRowByroute_stop) {
                stopRow rowstopRow = ((stopRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        estimated_arrival,
                        null,
                        null};
                if ((parentrouteRowByroute_stop != null)) {
                    columnValuesArray[3] = parentrouteRowByroute_stop[7];
                }
                rowstopRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstopRow);
                return rowstopRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                stopDataTable cln = ((stopDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new stopDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnestimated_arrival = base.Columns["estimated_arrival"];
                this.columnstop_Id = base.Columns["stop_Id"];
                this.columnroute_Id = base.Columns["route_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnestimated_arrival = new global::System.Data.DataColumn("estimated_arrival", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnestimated_arrival);
                this.columnstop_Id = new global::System.Data.DataColumn("stop_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstop_Id);
                this.columnroute_Id = new global::System.Data.DataColumn("route_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnroute_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstop_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnstop_Id.AutoIncrement = true;
                this.columnstop_Id.AllowDBNull = false;
                this.columnstop_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRow NewstopRow() {
                return ((stopRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new stopRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(stopRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.stopRowChanged != null)) {
                    this.stopRowChanged(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.stopRowChanging != null)) {
                    this.stopRowChanging(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.stopRowDeleted != null)) {
                    this.stopRowDeleted(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.stopRowDeleting != null)) {
                    this.stopRowDeleting(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestopRow(stopRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "stopDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class addressDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnstreet_name;
            
            private global::System.Data.DataColumn columnstreet_nbr;
            
            private global::System.Data.DataColumn columnstreet_nbr_suffix;
            
            private global::System.Data.DataColumn columnapartment;
            
            private global::System.Data.DataColumn columncity;
            
            private global::System.Data.DataColumn columnstop_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressDataTable() {
                this.TableName = "address";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal addressDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected addressDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street_nameColumn {
                get {
                    return this.columnstreet_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street_nbrColumn {
                get {
                    return this.columnstreet_nbr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn street_nbr_suffixColumn {
                get {
                    return this.columnstreet_nbr_suffix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apartmentColumn {
                get {
                    return this.columnapartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stop_IdColumn {
                get {
                    return this.columnstop_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow this[int index] {
                get {
                    return ((addressRow)(this.Rows[index]));
                }
            }
            
            public event addressRowChangeEventHandler addressRowChanging;
            
            public event addressRowChangeEventHandler addressRowChanged;
            
            public event addressRowChangeEventHandler addressRowDeleting;
            
            public event addressRowChangeEventHandler addressRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddaddressRow(addressRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow AddaddressRow(string street_name, string street_nbr, string street_nbr_suffix, string apartment, string city, stopRow parentstopRowBystop_address) {
                addressRow rowaddressRow = ((addressRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        street_name,
                        street_nbr,
                        street_nbr_suffix,
                        apartment,
                        city,
                        null};
                if ((parentstopRowBystop_address != null)) {
                    columnValuesArray[5] = parentstopRowBystop_address[2];
                }
                rowaddressRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowaddressRow);
                return rowaddressRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                addressDataTable cln = ((addressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new addressDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstreet_name = base.Columns["street_name"];
                this.columnstreet_nbr = base.Columns["street_nbr"];
                this.columnstreet_nbr_suffix = base.Columns["street_nbr_suffix"];
                this.columnapartment = base.Columns["apartment"];
                this.columncity = base.Columns["city"];
                this.columnstop_Id = base.Columns["stop_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstreet_name = new global::System.Data.DataColumn("street_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet_name);
                this.columnstreet_nbr = new global::System.Data.DataColumn("street_nbr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet_nbr);
                this.columnstreet_nbr_suffix = new global::System.Data.DataColumn("street_nbr_suffix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstreet_nbr_suffix);
                this.columnapartment = new global::System.Data.DataColumn("apartment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapartment);
                this.columncity = new global::System.Data.DataColumn("city", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncity);
                this.columnstop_Id = new global::System.Data.DataColumn("stop_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstop_Id);
                this.columnstreet_name.AllowDBNull = false;
                this.columnstreet_nbr.AllowDBNull = false;
                this.columncity.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow NewaddressRow() {
                return ((addressRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new addressRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(addressRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.addressRowChanged != null)) {
                    this.addressRowChanged(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.addressRowChanging != null)) {
                    this.addressRowChanging(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.addressRowDeleted != null)) {
                    this.addressRowDeleted(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.addressRowDeleting != null)) {
                    this.addressRowDeleting(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveaddressRow(addressRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "addressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class locationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnx;
            
            private global::System.Data.DataColumn columny;
            
            private global::System.Data.DataColumn columnstop_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public locationDataTable() {
                this.TableName = "location";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal locationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected locationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xColumn {
                get {
                    return this.columnx;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yColumn {
                get {
                    return this.columny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stop_IdColumn {
                get {
                    return this.columnstop_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public locationRow this[int index] {
                get {
                    return ((locationRow)(this.Rows[index]));
                }
            }
            
            public event locationRowChangeEventHandler locationRowChanging;
            
            public event locationRowChangeEventHandler locationRowChanged;
            
            public event locationRowChangeEventHandler locationRowDeleting;
            
            public event locationRowChangeEventHandler locationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddlocationRow(locationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public locationRow AddlocationRow(long x, long y, stopRow parentstopRowBystop_location) {
                locationRow rowlocationRow = ((locationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        x,
                        y,
                        null};
                if ((parentstopRowBystop_location != null)) {
                    columnValuesArray[2] = parentstopRowBystop_location[2];
                }
                rowlocationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowlocationRow);
                return rowlocationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                locationDataTable cln = ((locationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new locationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnx = base.Columns["x"];
                this.columny = base.Columns["y"];
                this.columnstop_Id = base.Columns["stop_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnx = new global::System.Data.DataColumn("x", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnx);
                this.columny = new global::System.Data.DataColumn("y", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columny);
                this.columnstop_Id = new global::System.Data.DataColumn("stop_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstop_Id);
                this.columnx.AllowDBNull = false;
                this.columnx.Namespace = "";
                this.columny.AllowDBNull = false;
                this.columny.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public locationRow NewlocationRow() {
                return ((locationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new locationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(locationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.locationRowChanged != null)) {
                    this.locationRowChanged(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.locationRowChanging != null)) {
                    this.locationRowChanging(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.locationRowDeleted != null)) {
                    this.locationRowDeleted(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.locationRowDeleting != null)) {
                    this.locationRowDeleting(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovelocationRow(locationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "locationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class estimated_lengthDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnmeters;
            
            private global::System.Data.DataColumn columnminutes;
            
            private global::System.Data.DataColumn columnroute_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public estimated_lengthDataTable() {
                this.TableName = "estimated_length";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal estimated_lengthDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected estimated_lengthDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metersColumn {
                get {
                    return this.columnmeters;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn minutesColumn {
                get {
                    return this.columnminutes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public estimated_lengthRow this[int index] {
                get {
                    return ((estimated_lengthRow)(this.Rows[index]));
                }
            }
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowChanging;
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowChanged;
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowDeleting;
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addestimated_lengthRow(estimated_lengthRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public estimated_lengthRow Addestimated_lengthRow(long meters, long minutes, routeRow parentrouteRowByroute_estimated_length) {
                estimated_lengthRow rowestimated_lengthRow = ((estimated_lengthRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        meters,
                        minutes,
                        null};
                if ((parentrouteRowByroute_estimated_length != null)) {
                    columnValuesArray[2] = parentrouteRowByroute_estimated_length[7];
                }
                rowestimated_lengthRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowestimated_lengthRow);
                return rowestimated_lengthRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                estimated_lengthDataTable cln = ((estimated_lengthDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new estimated_lengthDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmeters = base.Columns["meters"];
                this.columnminutes = base.Columns["minutes"];
                this.columnroute_Id = base.Columns["route_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmeters = new global::System.Data.DataColumn("meters", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmeters);
                this.columnminutes = new global::System.Data.DataColumn("minutes", typeof(long), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnminutes);
                this.columnroute_Id = new global::System.Data.DataColumn("route_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnroute_Id);
                this.columnmeters.AllowDBNull = false;
                this.columnmeters.Namespace = "";
                this.columnminutes.AllowDBNull = false;
                this.columnminutes.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public estimated_lengthRow Newestimated_lengthRow() {
                return ((estimated_lengthRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new estimated_lengthRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(estimated_lengthRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.estimated_lengthRowChanged != null)) {
                    this.estimated_lengthRowChanged(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.estimated_lengthRowChanging != null)) {
                    this.estimated_lengthRowChanging(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.estimated_lengthRowDeleted != null)) {
                    this.estimated_lengthRowDeleted(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.estimated_lengthRowDeleting != null)) {
                    this.estimated_lengthRowDeleting(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeestimated_lengthRow(estimated_lengthRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "estimated_lengthDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class capacity_needDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpassengers;
            
            private global::System.Data.DataColumn columnwheelchairs;
            
            private global::System.Data.DataColumn columnroute_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public capacity_needDataTable() {
                this.TableName = "capacity_need";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal capacity_needDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected capacity_needDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn passengersColumn {
                get {
                    return this.columnpassengers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wheelchairsColumn {
                get {
                    return this.columnwheelchairs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public capacity_needRow this[int index] {
                get {
                    return ((capacity_needRow)(this.Rows[index]));
                }
            }
            
            public event capacity_needRowChangeEventHandler capacity_needRowChanging;
            
            public event capacity_needRowChangeEventHandler capacity_needRowChanged;
            
            public event capacity_needRowChangeEventHandler capacity_needRowDeleting;
            
            public event capacity_needRowChangeEventHandler capacity_needRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addcapacity_needRow(capacity_needRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public capacity_needRow Addcapacity_needRow(long passengers, long wheelchairs, routeRow parentrouteRowByroute_capacity_need) {
                capacity_needRow rowcapacity_needRow = ((capacity_needRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        passengers,
                        wheelchairs,
                        null};
                if ((parentrouteRowByroute_capacity_need != null)) {
                    columnValuesArray[2] = parentrouteRowByroute_capacity_need[7];
                }
                rowcapacity_needRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcapacity_needRow);
                return rowcapacity_needRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                capacity_needDataTable cln = ((capacity_needDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new capacity_needDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpassengers = base.Columns["passengers"];
                this.columnwheelchairs = base.Columns["wheelchairs"];
                this.columnroute_Id = base.Columns["route_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpassengers = new global::System.Data.DataColumn("passengers", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpassengers);
                this.columnwheelchairs = new global::System.Data.DataColumn("wheelchairs", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwheelchairs);
                this.columnroute_Id = new global::System.Data.DataColumn("route_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnroute_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public capacity_needRow Newcapacity_needRow() {
                return ((capacity_needRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new capacity_needRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(capacity_needRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.capacity_needRowChanged != null)) {
                    this.capacity_needRowChanged(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.capacity_needRowChanging != null)) {
                    this.capacity_needRowChanging(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.capacity_needRowDeleted != null)) {
                    this.capacity_needRowDeleted(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.capacity_needRowDeleting != null)) {
                    this.capacity_needRowDeleting(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removecapacity_needRow(capacity_needRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                envelope ds = new envelope();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "capacity_needDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class errorRow : global::System.Data.DataRow {
            
            private errorDataTable tableerror;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal errorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableerror = ((errorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string msgtype {
                get {
                    return ((string)(this[this.tableerror.msgtypeColumn]));
                }
                set {
                    this[this.tableerror.msgtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string message {
                get {
                    return ((string)(this[this.tableerror.messageColumn]));
                }
                set {
                    this[this.tableerror.messageColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class pingRow : global::System.Data.DataRow {
            
            private pingDataTable tableping;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableping = ((pingDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class location_requestRow : global::System.Data.DataRow {
            
            private location_requestDataTable tablelocation_request;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal location_requestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablelocation_request = ((location_requestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int location_request_Id {
                get {
                    return ((int)(this[this.tablelocation_request.location_request_IdColumn]));
                }
                set {
                    this[this.tablelocation_request.location_request_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vehicleRow[] GetvehicleRows() {
                if ((this.Table.ChildRelations["location_request_vehicle"] == null)) {
                    return new vehicleRow[0];
                }
                else {
                    return ((vehicleRow[])(base.GetChildRows(this.Table.ChildRelations["location_request_vehicle"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class vehicleRow : global::System.Data.DataRow {
            
            private vehicleDataTable tablevehicle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vehicleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevehicle = ((vehicleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vehicle_Column {
                get {
                    return ((string)(this[this.tablevehicle.vehicle_ColumnColumn]));
                }
                set {
                    this[this.tablevehicle.vehicle_ColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int location_request_Id {
                get {
                    try {
                        return ((int)(this[this.tablevehicle.location_request_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'location_request_Id\' in table \'vehicle\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevehicle.location_request_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public location_requestRow location_requestRow {
                get {
                    return ((location_requestRow)(this.GetParentRow(this.Table.ParentRelations["location_request_vehicle"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["location_request_vehicle"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islocation_request_IdNull() {
                return this.IsNull(this.tablevehicle.location_request_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlocation_request_IdNull() {
                this[this.tablevehicle.location_request_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class routeRow : global::System.Data.DataRow {
            
            private routeDataTable tableroute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal routeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableroute = ((routeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableroute.idColumn]));
                }
                set {
                    this[this.tableroute.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    return ((string)(this[this.tableroute.versionColumn]));
                }
                set {
                    this[this.tableroute.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    return ((string)(this[this.tableroute.statusColumn]));
                }
                set {
                    this[this.tableroute.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mandatory {
                get {
                    return ((string)(this[this.tableroute.mandatoryColumn]));
                }
                set {
                    this[this.tableroute.mandatoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string previous_route {
                get {
                    try {
                        return ((string)(this[this.tableroute.previous_routeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'previous_route\' in table \'route\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableroute.previous_routeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long price_group {
                get {
                    try {
                        return ((long)(this[this.tableroute.price_groupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'price_group\' in table \'route\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableroute.price_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime assign_before {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableroute.assign_beforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assign_before\' in table \'route\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableroute.assign_beforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int route_Id {
                get {
                    return ((int)(this[this.tableroute.route_IdColumn]));
                }
                set {
                    this[this.tableroute.route_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprevious_routeNull() {
                return this.IsNull(this.tableroute.previous_routeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprevious_routeNull() {
                this[this.tableroute.previous_routeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprice_groupNull() {
                return this.IsNull(this.tableroute.price_groupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprice_groupNull() {
                this[this.tableroute.price_groupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isassign_beforeNull() {
                return this.IsNull(this.tableroute.assign_beforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setassign_beforeNull() {
                this[this.tableroute.assign_beforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public passengerRow[] GetpassengerRows() {
                if ((this.Table.ChildRelations["route_passenger"] == null)) {
                    return new passengerRow[0];
                }
                else {
                    return ((passengerRow[])(base.GetChildRows(this.Table.ChildRelations["route_passenger"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRow[] GetstopRows() {
                if ((this.Table.ChildRelations["route_stop"] == null)) {
                    return new stopRow[0];
                }
                else {
                    return ((stopRow[])(base.GetChildRows(this.Table.ChildRelations["route_stop"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public estimated_lengthRow[] Getestimated_lengthRows() {
                if ((this.Table.ChildRelations["route_estimated_length"] == null)) {
                    return new estimated_lengthRow[0];
                }
                else {
                    return ((estimated_lengthRow[])(base.GetChildRows(this.Table.ChildRelations["route_estimated_length"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public capacity_needRow[] Getcapacity_needRows() {
                if ((this.Table.ChildRelations["route_capacity_need"] == null)) {
                    return new capacity_needRow[0];
                }
                else {
                    return ((capacity_needRow[])(base.GetChildRows(this.Table.ChildRelations["route_capacity_need"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class passengerRow : global::System.Data.DataRow {
            
            private passengerDataTable tablepassenger;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal passengerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepassenger = ((passengerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablepassenger.idColumn]));
                }
                set {
                    this[this.tablepassenger.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'passenger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.phoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phone\' in table \'passenger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime promised_pickup {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepassenger.promised_pickupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'promised_pickup\' in table \'passenger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.promised_pickupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string extra_people {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.extra_peopleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'extra_people\' in table \'passenger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.extra_peopleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pickup_note {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.pickup_noteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pickup_note\' in table \'passenger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.pickup_noteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dropoff_note {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.dropoff_noteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dropoff_note\' in table \'passenger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.dropoff_noteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pickup {
                get {
                    return ((string)(this[this.tablepassenger.pickupColumn]));
                }
                set {
                    this[this.tablepassenger.pickupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dropoff {
                get {
                    return ((string)(this[this.tablepassenger.dropoffColumn]));
                }
                set {
                    this[this.tablepassenger.dropoffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int route_Id {
                get {
                    try {
                        return ((int)(this[this.tablepassenger.route_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'route_Id\' in table \'passenger\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.route_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_passenger"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_passenger"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablepassenger.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablepassenger.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphoneNull() {
                return this.IsNull(this.tablepassenger.phoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphoneNull() {
                this[this.tablepassenger.phoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispromised_pickupNull() {
                return this.IsNull(this.tablepassenger.promised_pickupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpromised_pickupNull() {
                this[this.tablepassenger.promised_pickupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isextra_peopleNull() {
                return this.IsNull(this.tablepassenger.extra_peopleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setextra_peopleNull() {
                this[this.tablepassenger.extra_peopleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispickup_noteNull() {
                return this.IsNull(this.tablepassenger.pickup_noteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpickup_noteNull() {
                this[this.tablepassenger.pickup_noteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdropoff_noteNull() {
                return this.IsNull(this.tablepassenger.dropoff_noteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdropoff_noteNull() {
                this[this.tablepassenger.dropoff_noteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isroute_IdNull() {
                return this.IsNull(this.tablepassenger.route_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setroute_IdNull() {
                this[this.tablepassenger.route_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class stopRow : global::System.Data.DataRow {
            
            private stopDataTable tablestop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal stopRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestop = ((stopDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tablestop.idColumn]));
                }
                set {
                    this[this.tablestop.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime estimated_arrival {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablestop.estimated_arrivalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'estimated_arrival\' in table \'stop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestop.estimated_arrivalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stop_Id {
                get {
                    return ((int)(this[this.tablestop.stop_IdColumn]));
                }
                set {
                    this[this.tablestop.stop_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int route_Id {
                get {
                    try {
                        return ((int)(this[this.tablestop.route_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'route_Id\' in table \'stop\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestop.route_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_stop"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_stop"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isestimated_arrivalNull() {
                return this.IsNull(this.tablestop.estimated_arrivalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setestimated_arrivalNull() {
                this[this.tablestop.estimated_arrivalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isroute_IdNull() {
                return this.IsNull(this.tablestop.route_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setroute_IdNull() {
                this[this.tablestop.route_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow[] GetaddressRows() {
                if ((this.Table.ChildRelations["stop_address"] == null)) {
                    return new addressRow[0];
                }
                else {
                    return ((addressRow[])(base.GetChildRows(this.Table.ChildRelations["stop_address"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public locationRow[] GetlocationRows() {
                if ((this.Table.ChildRelations["stop_location"] == null)) {
                    return new locationRow[0];
                }
                else {
                    return ((locationRow[])(base.GetChildRows(this.Table.ChildRelations["stop_location"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class addressRow : global::System.Data.DataRow {
            
            private addressDataTable tableaddress;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal addressRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaddress = ((addressDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string street_name {
                get {
                    return ((string)(this[this.tableaddress.street_nameColumn]));
                }
                set {
                    this[this.tableaddress.street_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string street_nbr {
                get {
                    return ((string)(this[this.tableaddress.street_nbrColumn]));
                }
                set {
                    this[this.tableaddress.street_nbrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string street_nbr_suffix {
                get {
                    try {
                        return ((string)(this[this.tableaddress.street_nbr_suffixColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'street_nbr_suffix\' in table \'address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.street_nbr_suffixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string apartment {
                get {
                    try {
                        return ((string)(this[this.tableaddress.apartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'apartment\' in table \'address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.apartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string city {
                get {
                    return ((string)(this[this.tableaddress.cityColumn]));
                }
                set {
                    this[this.tableaddress.cityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stop_Id {
                get {
                    try {
                        return ((int)(this[this.tableaddress.stop_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stop_Id\' in table \'address\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.stop_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRow stopRow {
                get {
                    return ((stopRow)(this.GetParentRow(this.Table.ParentRelations["stop_address"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stop_address"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstreet_nbr_suffixNull() {
                return this.IsNull(this.tableaddress.street_nbr_suffixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstreet_nbr_suffixNull() {
                this[this.tableaddress.street_nbr_suffixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsapartmentNull() {
                return this.IsNull(this.tableaddress.apartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetapartmentNull() {
                this[this.tableaddress.apartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstop_IdNull() {
                return this.IsNull(this.tableaddress.stop_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstop_IdNull() {
                this[this.tableaddress.stop_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class locationRow : global::System.Data.DataRow {
            
            private locationDataTable tablelocation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal locationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablelocation = ((locationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long x {
                get {
                    return ((long)(this[this.tablelocation.xColumn]));
                }
                set {
                    this[this.tablelocation.xColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long y {
                get {
                    return ((long)(this[this.tablelocation.yColumn]));
                }
                set {
                    this[this.tablelocation.yColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int stop_Id {
                get {
                    try {
                        return ((int)(this[this.tablelocation.stop_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stop_Id\' in table \'location\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablelocation.stop_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRow stopRow {
                get {
                    return ((stopRow)(this.GetParentRow(this.Table.ParentRelations["stop_location"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stop_location"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstop_IdNull() {
                return this.IsNull(this.tablelocation.stop_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstop_IdNull() {
                this[this.tablelocation.stop_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class estimated_lengthRow : global::System.Data.DataRow {
            
            private estimated_lengthDataTable tableestimated_length;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal estimated_lengthRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableestimated_length = ((estimated_lengthDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long meters {
                get {
                    return ((long)(this[this.tableestimated_length.metersColumn]));
                }
                set {
                    this[this.tableestimated_length.metersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long minutes {
                get {
                    return ((long)(this[this.tableestimated_length.minutesColumn]));
                }
                set {
                    this[this.tableestimated_length.minutesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int route_Id {
                get {
                    try {
                        return ((int)(this[this.tableestimated_length.route_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'route_Id\' in table \'estimated_length\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableestimated_length.route_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_estimated_length"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_estimated_length"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isroute_IdNull() {
                return this.IsNull(this.tableestimated_length.route_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setroute_IdNull() {
                this[this.tableestimated_length.route_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class capacity_needRow : global::System.Data.DataRow {
            
            private capacity_needDataTable tablecapacity_need;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal capacity_needRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecapacity_need = ((capacity_needDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long passengers {
                get {
                    try {
                        return ((long)(this[this.tablecapacity_need.passengersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'passengers\' in table \'capacity_need\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecapacity_need.passengersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long wheelchairs {
                get {
                    try {
                        return ((long)(this[this.tablecapacity_need.wheelchairsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'wheelchairs\' in table \'capacity_need\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecapacity_need.wheelchairsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int route_Id {
                get {
                    try {
                        return ((int)(this[this.tablecapacity_need.route_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'route_Id\' in table \'capacity_need\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecapacity_need.route_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_capacity_need"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_capacity_need"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspassengersNull() {
                return this.IsNull(this.tablecapacity_need.passengersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpassengersNull() {
                this[this.tablecapacity_need.passengersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswheelchairsNull() {
                return this.IsNull(this.tablecapacity_need.wheelchairsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwheelchairsNull() {
                this[this.tablecapacity_need.wheelchairsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isroute_IdNull() {
                return this.IsNull(this.tablecapacity_need.route_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setroute_IdNull() {
                this[this.tablecapacity_need.route_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class errorRowChangeEvent : global::System.EventArgs {
            
            private errorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRowChangeEvent(errorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public errorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class pingRowChangeEvent : global::System.EventArgs {
            
            private pingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pingRowChangeEvent(pingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class location_requestRowChangeEvent : global::System.EventArgs {
            
            private location_requestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public location_requestRowChangeEvent(location_requestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public location_requestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class vehicleRowChangeEvent : global::System.EventArgs {
            
            private vehicleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vehicleRowChangeEvent(vehicleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vehicleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class routeRowChangeEvent : global::System.EventArgs {
            
            private routeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRowChangeEvent(routeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public routeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class passengerRowChangeEvent : global::System.EventArgs {
            
            private passengerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public passengerRowChangeEvent(passengerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public passengerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class stopRowChangeEvent : global::System.EventArgs {
            
            private stopRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRowChangeEvent(stopRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public stopRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class addressRowChangeEvent : global::System.EventArgs {
            
            private addressRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRowChangeEvent(addressRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public addressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class locationRowChangeEvent : global::System.EventArgs {
            
            private locationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public locationRowChangeEvent(locationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public locationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class estimated_lengthRowChangeEvent : global::System.EventArgs {
            
            private estimated_lengthRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public estimated_lengthRowChangeEvent(estimated_lengthRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public estimated_lengthRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class capacity_needRowChangeEvent : global::System.EventArgs {
            
            private capacity_needRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public capacity_needRowChangeEvent(capacity_needRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public capacity_needRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591