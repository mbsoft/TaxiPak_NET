//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MPKService {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class envelope : DataSet {
        
        private errorDataTable tableerror;
        
        private pingDataTable tableping;
        
        private location_requestDataTable tablelocation_request;
        
        private vehicleDataTable tablevehicle;
        
        private routeDataTable tableroute;
        
        private passengerDataTable tablepassenger;
        
        private stopDataTable tablestop;
        
        private addressDataTable tableaddress;
        
        private locationDataTable tablelocation;
        
        private estimated_lengthDataTable tableestimated_length;
        
        private capacity_needDataTable tablecapacity_need;
        
        private DataRelation relationlocation_request_vehicle;
        
        private DataRelation relationstop_address;
        
        private DataRelation relationstop_location;
        
        private DataRelation relationroute_passenger;
        
        private DataRelation relationroute_stop;
        
        private DataRelation relationroute_estimated_length;
        
        private DataRelation relationroute_capacity_need;
        
        public envelope() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected envelope(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["error"] != null)) {
                    this.Tables.Add(new errorDataTable(ds.Tables["error"]));
                }
                if ((ds.Tables["ping"] != null)) {
                    this.Tables.Add(new pingDataTable(ds.Tables["ping"]));
                }
                if ((ds.Tables["location_request"] != null)) {
                    this.Tables.Add(new location_requestDataTable(ds.Tables["location_request"]));
                }
                if ((ds.Tables["vehicle"] != null)) {
                    this.Tables.Add(new vehicleDataTable(ds.Tables["vehicle"]));
                }
                if ((ds.Tables["route"] != null)) {
                    this.Tables.Add(new routeDataTable(ds.Tables["route"]));
                }
                if ((ds.Tables["passenger"] != null)) {
                    this.Tables.Add(new passengerDataTable(ds.Tables["passenger"]));
                }
                if ((ds.Tables["stop"] != null)) {
                    this.Tables.Add(new stopDataTable(ds.Tables["stop"]));
                }
                if ((ds.Tables["address"] != null)) {
                    this.Tables.Add(new addressDataTable(ds.Tables["address"]));
                }
                if ((ds.Tables["location"] != null)) {
                    this.Tables.Add(new locationDataTable(ds.Tables["location"]));
                }
                if ((ds.Tables["estimated_length"] != null)) {
                    this.Tables.Add(new estimated_lengthDataTable(ds.Tables["estimated_length"]));
                }
                if ((ds.Tables["capacity_need"] != null)) {
                    this.Tables.Add(new capacity_needDataTable(ds.Tables["capacity_need"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public errorDataTable error {
            get {
                return this.tableerror;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pingDataTable ping {
            get {
                return this.tableping;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public location_requestDataTable location_request {
            get {
                return this.tablelocation_request;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vehicleDataTable vehicle {
            get {
                return this.tablevehicle;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public routeDataTable route {
            get {
                return this.tableroute;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public passengerDataTable passenger {
            get {
                return this.tablepassenger;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public stopDataTable stop {
            get {
                return this.tablestop;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public addressDataTable address {
            get {
                return this.tableaddress;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public locationDataTable location {
            get {
                return this.tablelocation;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public estimated_lengthDataTable estimated_length {
            get {
                return this.tableestimated_length;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public capacity_needDataTable capacity_need {
            get {
                return this.tablecapacity_need;
            }
        }
        
        public override DataSet Clone() {
            envelope cln = ((envelope)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["error"] != null)) {
                this.Tables.Add(new errorDataTable(ds.Tables["error"]));
            }
            if ((ds.Tables["ping"] != null)) {
                this.Tables.Add(new pingDataTable(ds.Tables["ping"]));
            }
            if ((ds.Tables["location_request"] != null)) {
                this.Tables.Add(new location_requestDataTable(ds.Tables["location_request"]));
            }
            if ((ds.Tables["vehicle"] != null)) {
                this.Tables.Add(new vehicleDataTable(ds.Tables["vehicle"]));
            }
            if ((ds.Tables["route"] != null)) {
                this.Tables.Add(new routeDataTable(ds.Tables["route"]));
            }
            if ((ds.Tables["passenger"] != null)) {
                this.Tables.Add(new passengerDataTable(ds.Tables["passenger"]));
            }
            if ((ds.Tables["stop"] != null)) {
                this.Tables.Add(new stopDataTable(ds.Tables["stop"]));
            }
            if ((ds.Tables["address"] != null)) {
                this.Tables.Add(new addressDataTable(ds.Tables["address"]));
            }
            if ((ds.Tables["location"] != null)) {
                this.Tables.Add(new locationDataTable(ds.Tables["location"]));
            }
            if ((ds.Tables["estimated_length"] != null)) {
                this.Tables.Add(new estimated_lengthDataTable(ds.Tables["estimated_length"]));
            }
            if ((ds.Tables["capacity_need"] != null)) {
                this.Tables.Add(new capacity_needDataTable(ds.Tables["capacity_need"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableerror = ((errorDataTable)(this.Tables["error"]));
            if ((this.tableerror != null)) {
                this.tableerror.InitVars();
            }
            this.tableping = ((pingDataTable)(this.Tables["ping"]));
            if ((this.tableping != null)) {
                this.tableping.InitVars();
            }
            this.tablelocation_request = ((location_requestDataTable)(this.Tables["location_request"]));
            if ((this.tablelocation_request != null)) {
                this.tablelocation_request.InitVars();
            }
            this.tablevehicle = ((vehicleDataTable)(this.Tables["vehicle"]));
            if ((this.tablevehicle != null)) {
                this.tablevehicle.InitVars();
            }
            this.tableroute = ((routeDataTable)(this.Tables["route"]));
            if ((this.tableroute != null)) {
                this.tableroute.InitVars();
            }
            this.tablepassenger = ((passengerDataTable)(this.Tables["passenger"]));
            if ((this.tablepassenger != null)) {
                this.tablepassenger.InitVars();
            }
            this.tablestop = ((stopDataTable)(this.Tables["stop"]));
            if ((this.tablestop != null)) {
                this.tablestop.InitVars();
            }
            this.tableaddress = ((addressDataTable)(this.Tables["address"]));
            if ((this.tableaddress != null)) {
                this.tableaddress.InitVars();
            }
            this.tablelocation = ((locationDataTable)(this.Tables["location"]));
            if ((this.tablelocation != null)) {
                this.tablelocation.InitVars();
            }
            this.tableestimated_length = ((estimated_lengthDataTable)(this.Tables["estimated_length"]));
            if ((this.tableestimated_length != null)) {
                this.tableestimated_length.InitVars();
            }
            this.tablecapacity_need = ((capacity_needDataTable)(this.Tables["capacity_need"]));
            if ((this.tablecapacity_need != null)) {
                this.tablecapacity_need.InitVars();
            }
            this.relationlocation_request_vehicle = this.Relations["location_request_vehicle"];
            this.relationstop_address = this.Relations["stop_address"];
            this.relationstop_location = this.Relations["stop_location"];
            this.relationroute_passenger = this.Relations["route_passenger"];
            this.relationroute_stop = this.Relations["route_stop"];
            this.relationroute_estimated_length = this.Relations["route_estimated_length"];
            this.relationroute_capacity_need = this.Relations["route_capacity_need"];
        }
        
        private void InitClass() {
            this.DataSetName = "envelope";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableerror = new errorDataTable();
            this.Tables.Add(this.tableerror);
            this.tableping = new pingDataTable();
            this.Tables.Add(this.tableping);
            this.tablelocation_request = new location_requestDataTable();
            this.Tables.Add(this.tablelocation_request);
            this.tablevehicle = new vehicleDataTable();
            this.Tables.Add(this.tablevehicle);
            this.tableroute = new routeDataTable();
            this.Tables.Add(this.tableroute);
            this.tablepassenger = new passengerDataTable();
            this.Tables.Add(this.tablepassenger);
            this.tablestop = new stopDataTable();
            this.Tables.Add(this.tablestop);
            this.tableaddress = new addressDataTable();
            this.Tables.Add(this.tableaddress);
            this.tablelocation = new locationDataTable();
            this.Tables.Add(this.tablelocation);
            this.tableestimated_length = new estimated_lengthDataTable();
            this.Tables.Add(this.tableestimated_length);
            this.tablecapacity_need = new capacity_needDataTable();
            this.Tables.Add(this.tablecapacity_need);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("location_request_vehicle", new DataColumn[] {
                        this.tablelocation_request.location_request_IdColumn}, new DataColumn[] {
                        this.tablevehicle.location_request_IdColumn});
            this.tablevehicle.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("route_passenger", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tablepassenger.route_IdColumn});
            this.tablepassenger.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("route_stop", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tablestop.route_IdColumn});
            this.tablestop.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("stop_address", new DataColumn[] {
                        this.tablestop.stop_IdColumn}, new DataColumn[] {
                        this.tableaddress.stop_IdColumn});
            this.tableaddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("stop_location", new DataColumn[] {
                        this.tablestop.stop_IdColumn}, new DataColumn[] {
                        this.tablelocation.stop_IdColumn});
            this.tablelocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("route_estimated_length", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tableestimated_length.route_IdColumn});
            this.tableestimated_length.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("route_capacity_need", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tablecapacity_need.route_IdColumn});
            this.tablecapacity_need.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationlocation_request_vehicle = new DataRelation("location_request_vehicle", new DataColumn[] {
                        this.tablelocation_request.location_request_IdColumn}, new DataColumn[] {
                        this.tablevehicle.location_request_IdColumn}, false);
            this.relationlocation_request_vehicle.Nested = true;
            this.Relations.Add(this.relationlocation_request_vehicle);
            this.relationstop_address = new DataRelation("stop_address", new DataColumn[] {
                        this.tablestop.stop_IdColumn}, new DataColumn[] {
                        this.tableaddress.stop_IdColumn}, false);
            this.relationstop_address.Nested = true;
            this.Relations.Add(this.relationstop_address);
            this.relationstop_location = new DataRelation("stop_location", new DataColumn[] {
                        this.tablestop.stop_IdColumn}, new DataColumn[] {
                        this.tablelocation.stop_IdColumn}, false);
            this.relationstop_location.Nested = true;
            this.Relations.Add(this.relationstop_location);
            this.relationroute_passenger = new DataRelation("route_passenger", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tablepassenger.route_IdColumn}, false);
            this.relationroute_passenger.Nested = true;
            this.Relations.Add(this.relationroute_passenger);
            this.relationroute_stop = new DataRelation("route_stop", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tablestop.route_IdColumn}, false);
            this.relationroute_stop.Nested = true;
            this.Relations.Add(this.relationroute_stop);
            this.relationroute_estimated_length = new DataRelation("route_estimated_length", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tableestimated_length.route_IdColumn}, false);
            this.relationroute_estimated_length.Nested = true;
            this.Relations.Add(this.relationroute_estimated_length);
            this.relationroute_capacity_need = new DataRelation("route_capacity_need", new DataColumn[] {
                        this.tableroute.route_IdColumn}, new DataColumn[] {
                        this.tablecapacity_need.route_IdColumn}, false);
            this.relationroute_capacity_need.Nested = true;
            this.Relations.Add(this.relationroute_capacity_need);
        }
        
        private bool ShouldSerializeerror() {
            return false;
        }
        
        private bool ShouldSerializeping() {
            return false;
        }
        
        private bool ShouldSerializelocation_request() {
            return false;
        }
        
        private bool ShouldSerializevehicle() {
            return false;
        }
        
        private bool ShouldSerializeroute() {
            return false;
        }
        
        private bool ShouldSerializepassenger() {
            return false;
        }
        
        private bool ShouldSerializestop() {
            return false;
        }
        
        private bool ShouldSerializeaddress() {
            return false;
        }
        
        private bool ShouldSerializelocation() {
            return false;
        }
        
        private bool ShouldSerializeestimated_length() {
            return false;
        }
        
        private bool ShouldSerializecapacity_need() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void errorRowChangeEventHandler(object sender, errorRowChangeEvent e);
        
        public delegate void pingRowChangeEventHandler(object sender, pingRowChangeEvent e);
        
        public delegate void location_requestRowChangeEventHandler(object sender, location_requestRowChangeEvent e);
        
        public delegate void vehicleRowChangeEventHandler(object sender, vehicleRowChangeEvent e);
        
        public delegate void routeRowChangeEventHandler(object sender, routeRowChangeEvent e);
        
        public delegate void passengerRowChangeEventHandler(object sender, passengerRowChangeEvent e);
        
        public delegate void stopRowChangeEventHandler(object sender, stopRowChangeEvent e);
        
        public delegate void addressRowChangeEventHandler(object sender, addressRowChangeEvent e);
        
        public delegate void locationRowChangeEventHandler(object sender, locationRowChangeEvent e);
        
        public delegate void estimated_lengthRowChangeEventHandler(object sender, estimated_lengthRowChangeEvent e);
        
        public delegate void capacity_needRowChangeEventHandler(object sender, capacity_needRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class errorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmsgtype;
            
            private DataColumn columnmessage;
            
            internal errorDataTable() : 
                    base("error") {
                this.InitClass();
            }
            
            internal errorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn msgtypeColumn {
                get {
                    return this.columnmsgtype;
                }
            }
            
            internal DataColumn messageColumn {
                get {
                    return this.columnmessage;
                }
            }
            
            public errorRow this[int index] {
                get {
                    return ((errorRow)(this.Rows[index]));
                }
            }
            
            public event errorRowChangeEventHandler errorRowChanged;
            
            public event errorRowChangeEventHandler errorRowChanging;
            
            public event errorRowChangeEventHandler errorRowDeleted;
            
            public event errorRowChangeEventHandler errorRowDeleting;
            
            public void AdderrorRow(errorRow row) {
                this.Rows.Add(row);
            }
            
            public errorRow AdderrorRow(string msgtype, string message) {
                errorRow rowerrorRow = ((errorRow)(this.NewRow()));
                rowerrorRow.ItemArray = new object[] {
                        msgtype,
                        message};
                this.Rows.Add(rowerrorRow);
                return rowerrorRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                errorDataTable cln = ((errorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new errorDataTable();
            }
            
            internal void InitVars() {
                this.columnmsgtype = this.Columns["msgtype"];
                this.columnmessage = this.Columns["message"];
            }
            
            private void InitClass() {
                this.columnmsgtype = new DataColumn("msgtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmsgtype);
                this.columnmessage = new DataColumn("message", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmessage);
                this.columnmsgtype.AllowDBNull = false;
                this.columnmessage.AllowDBNull = false;
            }
            
            public errorRow NewerrorRow() {
                return ((errorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new errorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(errorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.errorRowChanged != null)) {
                    this.errorRowChanged(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.errorRowChanging != null)) {
                    this.errorRowChanging(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.errorRowDeleted != null)) {
                    this.errorRowDeleted(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.errorRowDeleting != null)) {
                    this.errorRowDeleting(this, new errorRowChangeEvent(((errorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveerrorRow(errorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class errorRow : DataRow {
            
            private errorDataTable tableerror;
            
            internal errorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableerror = ((errorDataTable)(this.Table));
            }
            
            public string msgtype {
                get {
                    return ((string)(this[this.tableerror.msgtypeColumn]));
                }
                set {
                    this[this.tableerror.msgtypeColumn] = value;
                }
            }
            
            public string message {
                get {
                    return ((string)(this[this.tableerror.messageColumn]));
                }
                set {
                    this[this.tableerror.messageColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class errorRowChangeEvent : EventArgs {
            
            private errorRow eventRow;
            
            private DataRowAction eventAction;
            
            public errorRowChangeEvent(errorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public errorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pingDataTable : DataTable, System.Collections.IEnumerable {
            
            internal pingDataTable() : 
                    base("ping") {
                this.InitClass();
            }
            
            internal pingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public pingRow this[int index] {
                get {
                    return ((pingRow)(this.Rows[index]));
                }
            }
            
            public event pingRowChangeEventHandler pingRowChanged;
            
            public event pingRowChangeEventHandler pingRowChanging;
            
            public event pingRowChangeEventHandler pingRowDeleted;
            
            public event pingRowChangeEventHandler pingRowDeleting;
            
            public void AddpingRow(pingRow row) {
                this.Rows.Add(row);
            }
            
            public pingRow AddpingRow() {
                pingRow rowpingRow = ((pingRow)(this.NewRow()));
                rowpingRow.ItemArray = new object[0];
                this.Rows.Add(rowpingRow);
                return rowpingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                pingDataTable cln = ((pingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new pingDataTable();
            }
            
            internal void InitVars() {
            }
            
            private void InitClass() {
            }
            
            public pingRow NewpingRow() {
                return ((pingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new pingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(pingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pingRowChanged != null)) {
                    this.pingRowChanged(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pingRowChanging != null)) {
                    this.pingRowChanging(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pingRowDeleted != null)) {
                    this.pingRowDeleted(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pingRowDeleting != null)) {
                    this.pingRowDeleting(this, new pingRowChangeEvent(((pingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovepingRow(pingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pingRow : DataRow {
            
            private pingDataTable tableping;
            
            internal pingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableping = ((pingDataTable)(this.Table));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class pingRowChangeEvent : EventArgs {
            
            private pingRow eventRow;
            
            private DataRowAction eventAction;
            
            public pingRowChangeEvent(pingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public pingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class location_requestDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlocation_request_Id;
            
            internal location_requestDataTable() : 
                    base("location_request") {
                this.InitClass();
            }
            
            internal location_requestDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn location_request_IdColumn {
                get {
                    return this.columnlocation_request_Id;
                }
            }
            
            public location_requestRow this[int index] {
                get {
                    return ((location_requestRow)(this.Rows[index]));
                }
            }
            
            public event location_requestRowChangeEventHandler location_requestRowChanged;
            
            public event location_requestRowChangeEventHandler location_requestRowChanging;
            
            public event location_requestRowChangeEventHandler location_requestRowDeleted;
            
            public event location_requestRowChangeEventHandler location_requestRowDeleting;
            
            public void Addlocation_requestRow(location_requestRow row) {
                this.Rows.Add(row);
            }
            
            public location_requestRow Addlocation_requestRow() {
                location_requestRow rowlocation_requestRow = ((location_requestRow)(this.NewRow()));
                rowlocation_requestRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowlocation_requestRow);
                return rowlocation_requestRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                location_requestDataTable cln = ((location_requestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new location_requestDataTable();
            }
            
            internal void InitVars() {
                this.columnlocation_request_Id = this.Columns["location_request_Id"];
            }
            
            private void InitClass() {
                this.columnlocation_request_Id = new DataColumn("location_request_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnlocation_request_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnlocation_request_Id}, true));
                this.columnlocation_request_Id.AutoIncrement = true;
                this.columnlocation_request_Id.AllowDBNull = false;
                this.columnlocation_request_Id.Unique = true;
            }
            
            public location_requestRow Newlocation_requestRow() {
                return ((location_requestRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new location_requestRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(location_requestRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.location_requestRowChanged != null)) {
                    this.location_requestRowChanged(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.location_requestRowChanging != null)) {
                    this.location_requestRowChanging(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.location_requestRowDeleted != null)) {
                    this.location_requestRowDeleted(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.location_requestRowDeleting != null)) {
                    this.location_requestRowDeleting(this, new location_requestRowChangeEvent(((location_requestRow)(e.Row)), e.Action));
                }
            }
            
            public void Removelocation_requestRow(location_requestRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class location_requestRow : DataRow {
            
            private location_requestDataTable tablelocation_request;
            
            internal location_requestRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablelocation_request = ((location_requestDataTable)(this.Table));
            }
            
            public vehicleRow[] GetvehicleRows() {
                return ((vehicleRow[])(this.GetChildRows(this.Table.ChildRelations["location_request_vehicle"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class location_requestRowChangeEvent : EventArgs {
            
            private location_requestRow eventRow;
            
            private DataRowAction eventAction;
            
            public location_requestRowChangeEvent(location_requestRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public location_requestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class vehicleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnvehicle_Column;
            
            private DataColumn columnlocation_request_Id;
            
            internal vehicleDataTable() : 
                    base("vehicle") {
                this.InitClass();
            }
            
            internal vehicleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn vehicle_ColumnColumn {
                get {
                    return this.columnvehicle_Column;
                }
            }
            
            internal DataColumn location_request_IdColumn {
                get {
                    return this.columnlocation_request_Id;
                }
            }
            
            public vehicleRow this[int index] {
                get {
                    return ((vehicleRow)(this.Rows[index]));
                }
            }
            
            public event vehicleRowChangeEventHandler vehicleRowChanged;
            
            public event vehicleRowChangeEventHandler vehicleRowChanging;
            
            public event vehicleRowChangeEventHandler vehicleRowDeleted;
            
            public event vehicleRowChangeEventHandler vehicleRowDeleting;
            
            public void AddvehicleRow(vehicleRow row) {
                this.Rows.Add(row);
            }
            
            public vehicleRow AddvehicleRow(string vehicle_Column, location_requestRow parentlocation_requestRowBylocation_request_vehicle) {
                vehicleRow rowvehicleRow = ((vehicleRow)(this.NewRow()));
                rowvehicleRow.ItemArray = new object[] {
                        vehicle_Column,
                        parentlocation_requestRowBylocation_request_vehicle[0]};
                this.Rows.Add(rowvehicleRow);
                return rowvehicleRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                vehicleDataTable cln = ((vehicleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new vehicleDataTable();
            }
            
            internal void InitVars() {
                this.columnvehicle_Column = this.Columns["vehicle_Column"];
                this.columnlocation_request_Id = this.Columns["location_request_Id"];
            }
            
            private void InitClass() {
                this.columnvehicle_Column = new DataColumn("vehicle_Column", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnvehicle_Column);
                this.columnlocation_request_Id = new DataColumn("location_request_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnlocation_request_Id);
                this.columnvehicle_Column.AllowDBNull = false;
            }
            
            public vehicleRow NewvehicleRow() {
                return ((vehicleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new vehicleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(vehicleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vehicleRowChanged != null)) {
                    this.vehicleRowChanged(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vehicleRowChanging != null)) {
                    this.vehicleRowChanging(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vehicleRowDeleted != null)) {
                    this.vehicleRowDeleted(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vehicleRowDeleting != null)) {
                    this.vehicleRowDeleting(this, new vehicleRowChangeEvent(((vehicleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovevehicleRow(vehicleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class vehicleRow : DataRow {
            
            private vehicleDataTable tablevehicle;
            
            internal vehicleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablevehicle = ((vehicleDataTable)(this.Table));
            }
            
            public string vehicle_Column {
                get {
                    return ((string)(this[this.tablevehicle.vehicle_ColumnColumn]));
                }
                set {
                    this[this.tablevehicle.vehicle_ColumnColumn] = value;
                }
            }
            
            public location_requestRow location_requestRow {
                get {
                    return ((location_requestRow)(this.GetParentRow(this.Table.ParentRelations["location_request_vehicle"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["location_request_vehicle"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class vehicleRowChangeEvent : EventArgs {
            
            private vehicleRow eventRow;
            
            private DataRowAction eventAction;
            
            public vehicleRowChangeEvent(vehicleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public vehicleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class routeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnversion;
            
            private DataColumn columnstatus;
            
            private DataColumn columnmandatory;
            
            private DataColumn columnprevious_route;
            
            private DataColumn columnprice_group;
            
            private DataColumn columnassign_before;
            
            private DataColumn columnroute_Id;
            
            internal routeDataTable() : 
                    base("route") {
                this.InitClass();
            }
            
            internal routeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            internal DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            internal DataColumn mandatoryColumn {
                get {
                    return this.columnmandatory;
                }
            }
            
            internal DataColumn previous_routeColumn {
                get {
                    return this.columnprevious_route;
                }
            }
            
            internal DataColumn price_groupColumn {
                get {
                    return this.columnprice_group;
                }
            }
            
            internal DataColumn assign_beforeColumn {
                get {
                    return this.columnassign_before;
                }
            }
            
            internal DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            public routeRow this[int index] {
                get {
                    return ((routeRow)(this.Rows[index]));
                }
            }
            
            public event routeRowChangeEventHandler routeRowChanged;
            
            public event routeRowChangeEventHandler routeRowChanging;
            
            public event routeRowChangeEventHandler routeRowDeleted;
            
            public event routeRowChangeEventHandler routeRowDeleting;
            
            public void AddrouteRow(routeRow row) {
                this.Rows.Add(row);
            }
            
            public routeRow AddrouteRow(string id, string version, string status, string mandatory, string previous_route, long price_group, System.DateTime assign_before) {
                routeRow rowrouteRow = ((routeRow)(this.NewRow()));
                rowrouteRow.ItemArray = new object[] {
                        id,
                        version,
                        status,
                        mandatory,
                        previous_route,
                        price_group,
                        assign_before,
                        null};
                this.Rows.Add(rowrouteRow);
                return rowrouteRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                routeDataTable cln = ((routeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new routeDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnversion = this.Columns["version"];
                this.columnstatus = this.Columns["status"];
                this.columnmandatory = this.Columns["mandatory"];
                this.columnprevious_route = this.Columns["previous_route"];
                this.columnprice_group = this.Columns["price_group"];
                this.columnassign_before = this.Columns["assign_before"];
                this.columnroute_Id = this.Columns["route_Id"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnid);
                this.columnversion = new DataColumn("version", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnversion);
                this.columnstatus = new DataColumn("status", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnstatus);
                this.columnmandatory = new DataColumn("mandatory", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmandatory);
                this.columnprevious_route = new DataColumn("previous_route", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprevious_route);
                this.columnprice_group = new DataColumn("price_group", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprice_group);
                this.columnassign_before = new DataColumn("assign_before", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnassign_before);
                this.columnroute_Id = new DataColumn("route_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnroute_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnroute_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnstatus.AllowDBNull = false;
                this.columnstatus.Namespace = "";
                this.columnmandatory.AllowDBNull = false;
                this.columnroute_Id.AutoIncrement = true;
                this.columnroute_Id.AllowDBNull = false;
                this.columnroute_Id.Unique = true;
            }
            
            public routeRow NewrouteRow() {
                return ((routeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new routeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(routeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.routeRowChanged != null)) {
                    this.routeRowChanged(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.routeRowChanging != null)) {
                    this.routeRowChanging(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.routeRowDeleted != null)) {
                    this.routeRowDeleted(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.routeRowDeleting != null)) {
                    this.routeRowDeleting(this, new routeRowChangeEvent(((routeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoverouteRow(routeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class routeRow : DataRow {
            
            private routeDataTable tableroute;
            
            internal routeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableroute = ((routeDataTable)(this.Table));
            }
            
            public string id {
                get {
                    return ((string)(this[this.tableroute.idColumn]));
                }
                set {
                    this[this.tableroute.idColumn] = value;
                }
            }
            
            public string version {
                get {
                    return ((string)(this[this.tableroute.versionColumn]));
                }
                set {
                    this[this.tableroute.versionColumn] = value;
                }
            }
            
            public string status {
                get {
                    return ((string)(this[this.tableroute.statusColumn]));
                }
                set {
                    this[this.tableroute.statusColumn] = value;
                }
            }
            
            public string mandatory {
                get {
                    return ((string)(this[this.tableroute.mandatoryColumn]));
                }
                set {
                    this[this.tableroute.mandatoryColumn] = value;
                }
            }
            
            public string previous_route {
                get {
                    try {
                        return ((string)(this[this.tableroute.previous_routeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableroute.previous_routeColumn] = value;
                }
            }
            
            public long price_group {
                get {
                    try {
                        return ((long)(this[this.tableroute.price_groupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableroute.price_groupColumn] = value;
                }
            }
            
            public System.DateTime assign_before {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableroute.assign_beforeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableroute.assign_beforeColumn] = value;
                }
            }
            
            public bool Isprevious_routeNull() {
                return this.IsNull(this.tableroute.previous_routeColumn);
            }
            
            public void Setprevious_routeNull() {
                this[this.tableroute.previous_routeColumn] = System.Convert.DBNull;
            }
            
            public bool Isprice_groupNull() {
                return this.IsNull(this.tableroute.price_groupColumn);
            }
            
            public void Setprice_groupNull() {
                this[this.tableroute.price_groupColumn] = System.Convert.DBNull;
            }
            
            public bool Isassign_beforeNull() {
                return this.IsNull(this.tableroute.assign_beforeColumn);
            }
            
            public void Setassign_beforeNull() {
                this[this.tableroute.assign_beforeColumn] = System.Convert.DBNull;
            }
            
            public passengerRow[] GetpassengerRows() {
                return ((passengerRow[])(this.GetChildRows(this.Table.ChildRelations["route_passenger"])));
            }
            
            public stopRow[] GetstopRows() {
                return ((stopRow[])(this.GetChildRows(this.Table.ChildRelations["route_stop"])));
            }
            
            public estimated_lengthRow[] Getestimated_lengthRows() {
                return ((estimated_lengthRow[])(this.GetChildRows(this.Table.ChildRelations["route_estimated_length"])));
            }
            
            public capacity_needRow[] Getcapacity_needRows() {
                return ((capacity_needRow[])(this.GetChildRows(this.Table.ChildRelations["route_capacity_need"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class routeRowChangeEvent : EventArgs {
            
            private routeRow eventRow;
            
            private DataRowAction eventAction;
            
            public routeRowChangeEvent(routeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public routeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class passengerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnname;
            
            private DataColumn columnphone;
            
            private DataColumn columnpromised_pickup;
            
            private DataColumn columnextra_people;
            
            private DataColumn columnpickup_note;
            
            private DataColumn columndropoff_note;
            
            private DataColumn columnpickup;
            
            private DataColumn columndropoff;
            
            private DataColumn columnroute_Id;
            
            internal passengerDataTable() : 
                    base("passenger") {
                this.InitClass();
            }
            
            internal passengerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            internal DataColumn promised_pickupColumn {
                get {
                    return this.columnpromised_pickup;
                }
            }
            
            internal DataColumn extra_peopleColumn {
                get {
                    return this.columnextra_people;
                }
            }
            
            internal DataColumn pickup_noteColumn {
                get {
                    return this.columnpickup_note;
                }
            }
            
            internal DataColumn dropoff_noteColumn {
                get {
                    return this.columndropoff_note;
                }
            }
            
            internal DataColumn pickupColumn {
                get {
                    return this.columnpickup;
                }
            }
            
            internal DataColumn dropoffColumn {
                get {
                    return this.columndropoff;
                }
            }
            
            internal DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            public passengerRow this[int index] {
                get {
                    return ((passengerRow)(this.Rows[index]));
                }
            }
            
            public event passengerRowChangeEventHandler passengerRowChanged;
            
            public event passengerRowChangeEventHandler passengerRowChanging;
            
            public event passengerRowChangeEventHandler passengerRowDeleted;
            
            public event passengerRowChangeEventHandler passengerRowDeleting;
            
            public void AddpassengerRow(passengerRow row) {
                this.Rows.Add(row);
            }
            
            public passengerRow AddpassengerRow(string id, string name, string phone, System.DateTime promised_pickup, string extra_people, string pickup_note, string dropoff_note, string pickup, string dropoff, routeRow parentrouteRowByroute_passenger) {
                passengerRow rowpassengerRow = ((passengerRow)(this.NewRow()));
                rowpassengerRow.ItemArray = new object[] {
                        id,
                        name,
                        phone,
                        promised_pickup,
                        extra_people,
                        pickup_note,
                        dropoff_note,
                        pickup,
                        dropoff,
                        parentrouteRowByroute_passenger[7]};
                this.Rows.Add(rowpassengerRow);
                return rowpassengerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                passengerDataTable cln = ((passengerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new passengerDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnname = this.Columns["name"];
                this.columnphone = this.Columns["phone"];
                this.columnpromised_pickup = this.Columns["promised_pickup"];
                this.columnextra_people = this.Columns["extra_people"];
                this.columnpickup_note = this.Columns["pickup_note"];
                this.columndropoff_note = this.Columns["dropoff_note"];
                this.columnpickup = this.Columns["pickup"];
                this.columndropoff = this.Columns["dropoff"];
                this.columnroute_Id = this.Columns["route_Id"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnid);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnphone = new DataColumn("phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnphone);
                this.columnpromised_pickup = new DataColumn("promised_pickup", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpromised_pickup);
                this.columnextra_people = new DataColumn("extra_people", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnextra_people);
                this.columnpickup_note = new DataColumn("pickup_note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpickup_note);
                this.columndropoff_note = new DataColumn("dropoff_note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndropoff_note);
                this.columnpickup = new DataColumn("pickup", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpickup);
                this.columndropoff = new DataColumn("dropoff", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndropoff);
                this.columnroute_Id = new DataColumn("route_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnroute_Id);
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnpickup.AllowDBNull = false;
                this.columndropoff.AllowDBNull = false;
            }
            
            public passengerRow NewpassengerRow() {
                return ((passengerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new passengerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(passengerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.passengerRowChanged != null)) {
                    this.passengerRowChanged(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.passengerRowChanging != null)) {
                    this.passengerRowChanging(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.passengerRowDeleted != null)) {
                    this.passengerRowDeleted(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.passengerRowDeleting != null)) {
                    this.passengerRowDeleting(this, new passengerRowChangeEvent(((passengerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovepassengerRow(passengerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class passengerRow : DataRow {
            
            private passengerDataTable tablepassenger;
            
            internal passengerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablepassenger = ((passengerDataTable)(this.Table));
            }
            
            public string id {
                get {
                    return ((string)(this[this.tablepassenger.idColumn]));
                }
                set {
                    this[this.tablepassenger.idColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.nameColumn] = value;
                }
            }
            
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.phoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.phoneColumn] = value;
                }
            }
            
            public System.DateTime promised_pickup {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablepassenger.promised_pickupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.promised_pickupColumn] = value;
                }
            }
            
            public string extra_people {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.extra_peopleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.extra_peopleColumn] = value;
                }
            }
            
            public string pickup_note {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.pickup_noteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.pickup_noteColumn] = value;
                }
            }
            
            public string dropoff_note {
                get {
                    try {
                        return ((string)(this[this.tablepassenger.dropoff_noteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepassenger.dropoff_noteColumn] = value;
                }
            }
            
            public string pickup {
                get {
                    return ((string)(this[this.tablepassenger.pickupColumn]));
                }
                set {
                    this[this.tablepassenger.pickupColumn] = value;
                }
            }
            
            public string dropoff {
                get {
                    return ((string)(this[this.tablepassenger.dropoffColumn]));
                }
                set {
                    this[this.tablepassenger.dropoffColumn] = value;
                }
            }
            
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_passenger"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_passenger"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablepassenger.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablepassenger.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsphoneNull() {
                return this.IsNull(this.tablepassenger.phoneColumn);
            }
            
            public void SetphoneNull() {
                this[this.tablepassenger.phoneColumn] = System.Convert.DBNull;
            }
            
            public bool Ispromised_pickupNull() {
                return this.IsNull(this.tablepassenger.promised_pickupColumn);
            }
            
            public void Setpromised_pickupNull() {
                this[this.tablepassenger.promised_pickupColumn] = System.Convert.DBNull;
            }
            
            public bool Isextra_peopleNull() {
                return this.IsNull(this.tablepassenger.extra_peopleColumn);
            }
            
            public void Setextra_peopleNull() {
                this[this.tablepassenger.extra_peopleColumn] = System.Convert.DBNull;
            }
            
            public bool Ispickup_noteNull() {
                return this.IsNull(this.tablepassenger.pickup_noteColumn);
            }
            
            public void Setpickup_noteNull() {
                this[this.tablepassenger.pickup_noteColumn] = System.Convert.DBNull;
            }
            
            public bool Isdropoff_noteNull() {
                return this.IsNull(this.tablepassenger.dropoff_noteColumn);
            }
            
            public void Setdropoff_noteNull() {
                this[this.tablepassenger.dropoff_noteColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class passengerRowChangeEvent : EventArgs {
            
            private passengerRow eventRow;
            
            private DataRowAction eventAction;
            
            public passengerRowChangeEvent(passengerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public passengerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stopDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnestimated_arrival;
            
            private DataColumn columnstop_Id;
            
            private DataColumn columnroute_Id;
            
            internal stopDataTable() : 
                    base("stop") {
                this.InitClass();
            }
            
            internal stopDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn estimated_arrivalColumn {
                get {
                    return this.columnestimated_arrival;
                }
            }
            
            internal DataColumn stop_IdColumn {
                get {
                    return this.columnstop_Id;
                }
            }
            
            internal DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            public stopRow this[int index] {
                get {
                    return ((stopRow)(this.Rows[index]));
                }
            }
            
            public event stopRowChangeEventHandler stopRowChanged;
            
            public event stopRowChangeEventHandler stopRowChanging;
            
            public event stopRowChangeEventHandler stopRowDeleted;
            
            public event stopRowChangeEventHandler stopRowDeleting;
            
            public void AddstopRow(stopRow row) {
                this.Rows.Add(row);
            }
            
            public stopRow AddstopRow(string id, System.DateTime estimated_arrival, routeRow parentrouteRowByroute_stop) {
                stopRow rowstopRow = ((stopRow)(this.NewRow()));
                rowstopRow.ItemArray = new object[] {
                        id,
                        estimated_arrival,
                        null,
                        parentrouteRowByroute_stop[7]};
                this.Rows.Add(rowstopRow);
                return rowstopRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                stopDataTable cln = ((stopDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new stopDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnestimated_arrival = this.Columns["estimated_arrival"];
                this.columnstop_Id = this.Columns["stop_Id"];
                this.columnroute_Id = this.Columns["route_Id"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnid);
                this.columnestimated_arrival = new DataColumn("estimated_arrival", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnestimated_arrival);
                this.columnstop_Id = new DataColumn("stop_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnstop_Id);
                this.columnroute_Id = new DataColumn("route_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnroute_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnstop_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnstop_Id.AutoIncrement = true;
                this.columnstop_Id.AllowDBNull = false;
                this.columnstop_Id.Unique = true;
            }
            
            public stopRow NewstopRow() {
                return ((stopRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new stopRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(stopRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.stopRowChanged != null)) {
                    this.stopRowChanged(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.stopRowChanging != null)) {
                    this.stopRowChanging(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.stopRowDeleted != null)) {
                    this.stopRowDeleted(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.stopRowDeleting != null)) {
                    this.stopRowDeleting(this, new stopRowChangeEvent(((stopRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovestopRow(stopRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stopRow : DataRow {
            
            private stopDataTable tablestop;
            
            internal stopRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablestop = ((stopDataTable)(this.Table));
            }
            
            public string id {
                get {
                    return ((string)(this[this.tablestop.idColumn]));
                }
                set {
                    this[this.tablestop.idColumn] = value;
                }
            }
            
            public System.DateTime estimated_arrival {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablestop.estimated_arrivalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestop.estimated_arrivalColumn] = value;
                }
            }
            
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_stop"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_stop"]);
                }
            }
            
            public bool Isestimated_arrivalNull() {
                return this.IsNull(this.tablestop.estimated_arrivalColumn);
            }
            
            public void Setestimated_arrivalNull() {
                this[this.tablestop.estimated_arrivalColumn] = System.Convert.DBNull;
            }
            
            public addressRow[] GetaddressRows() {
                return ((addressRow[])(this.GetChildRows(this.Table.ChildRelations["stop_address"])));
            }
            
            public locationRow[] GetlocationRows() {
                return ((locationRow[])(this.GetChildRows(this.Table.ChildRelations["stop_location"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stopRowChangeEvent : EventArgs {
            
            private stopRow eventRow;
            
            private DataRowAction eventAction;
            
            public stopRowChangeEvent(stopRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public stopRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class addressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstreet_name;
            
            private DataColumn columnstreet_nbr;
            
            private DataColumn columnstreet_nbr_suffix;
            
            private DataColumn columnapartment;
            
            private DataColumn columncity;
            
            private DataColumn columnstop_Id;
            
            internal addressDataTable() : 
                    base("address") {
                this.InitClass();
            }
            
            internal addressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn street_nameColumn {
                get {
                    return this.columnstreet_name;
                }
            }
            
            internal DataColumn street_nbrColumn {
                get {
                    return this.columnstreet_nbr;
                }
            }
            
            internal DataColumn street_nbr_suffixColumn {
                get {
                    return this.columnstreet_nbr_suffix;
                }
            }
            
            internal DataColumn apartmentColumn {
                get {
                    return this.columnapartment;
                }
            }
            
            internal DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            internal DataColumn stop_IdColumn {
                get {
                    return this.columnstop_Id;
                }
            }
            
            public addressRow this[int index] {
                get {
                    return ((addressRow)(this.Rows[index]));
                }
            }
            
            public event addressRowChangeEventHandler addressRowChanged;
            
            public event addressRowChangeEventHandler addressRowChanging;
            
            public event addressRowChangeEventHandler addressRowDeleted;
            
            public event addressRowChangeEventHandler addressRowDeleting;
            
            public void AddaddressRow(addressRow row) {
                this.Rows.Add(row);
            }
            
            public addressRow AddaddressRow(string street_name, string street_nbr, string street_nbr_suffix, string apartment, string city, stopRow parentstopRowBystop_address) {
                addressRow rowaddressRow = ((addressRow)(this.NewRow()));
                rowaddressRow.ItemArray = new object[] {
                        street_name,
                        street_nbr,
                        street_nbr_suffix,
                        apartment,
                        city,
                        parentstopRowBystop_address[2]};
                this.Rows.Add(rowaddressRow);
                return rowaddressRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                addressDataTable cln = ((addressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new addressDataTable();
            }
            
            internal void InitVars() {
                this.columnstreet_name = this.Columns["street_name"];
                this.columnstreet_nbr = this.Columns["street_nbr"];
                this.columnstreet_nbr_suffix = this.Columns["street_nbr_suffix"];
                this.columnapartment = this.Columns["apartment"];
                this.columncity = this.Columns["city"];
                this.columnstop_Id = this.Columns["stop_Id"];
            }
            
            private void InitClass() {
                this.columnstreet_name = new DataColumn("street_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstreet_name);
                this.columnstreet_nbr = new DataColumn("street_nbr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstreet_nbr);
                this.columnstreet_nbr_suffix = new DataColumn("street_nbr_suffix", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstreet_nbr_suffix);
                this.columnapartment = new DataColumn("apartment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnapartment);
                this.columncity = new DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncity);
                this.columnstop_Id = new DataColumn("stop_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnstop_Id);
                this.columnstreet_name.AllowDBNull = false;
                this.columnstreet_nbr.AllowDBNull = false;
                this.columncity.AllowDBNull = false;
            }
            
            public addressRow NewaddressRow() {
                return ((addressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new addressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(addressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.addressRowChanged != null)) {
                    this.addressRowChanged(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.addressRowChanging != null)) {
                    this.addressRowChanging(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.addressRowDeleted != null)) {
                    this.addressRowDeleted(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.addressRowDeleting != null)) {
                    this.addressRowDeleting(this, new addressRowChangeEvent(((addressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveaddressRow(addressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class addressRow : DataRow {
            
            private addressDataTable tableaddress;
            
            internal addressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableaddress = ((addressDataTable)(this.Table));
            }
            
            public string street_name {
                get {
                    return ((string)(this[this.tableaddress.street_nameColumn]));
                }
                set {
                    this[this.tableaddress.street_nameColumn] = value;
                }
            }
            
            public string street_nbr {
                get {
                    return ((string)(this[this.tableaddress.street_nbrColumn]));
                }
                set {
                    this[this.tableaddress.street_nbrColumn] = value;
                }
            }
            
            public string street_nbr_suffix {
                get {
                    try {
                        return ((string)(this[this.tableaddress.street_nbr_suffixColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.street_nbr_suffixColumn] = value;
                }
            }
            
            public string apartment {
                get {
                    try {
                        return ((string)(this[this.tableaddress.apartmentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaddress.apartmentColumn] = value;
                }
            }
            
            public string city {
                get {
                    return ((string)(this[this.tableaddress.cityColumn]));
                }
                set {
                    this[this.tableaddress.cityColumn] = value;
                }
            }
            
            public stopRow stopRow {
                get {
                    return ((stopRow)(this.GetParentRow(this.Table.ParentRelations["stop_address"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stop_address"]);
                }
            }
            
            public bool Isstreet_nbr_suffixNull() {
                return this.IsNull(this.tableaddress.street_nbr_suffixColumn);
            }
            
            public void Setstreet_nbr_suffixNull() {
                this[this.tableaddress.street_nbr_suffixColumn] = System.Convert.DBNull;
            }
            
            public bool IsapartmentNull() {
                return this.IsNull(this.tableaddress.apartmentColumn);
            }
            
            public void SetapartmentNull() {
                this[this.tableaddress.apartmentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class addressRowChangeEvent : EventArgs {
            
            private addressRow eventRow;
            
            private DataRowAction eventAction;
            
            public addressRowChangeEvent(addressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public addressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class locationDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnx;
            
            private DataColumn columny;
            
            private DataColumn columnstop_Id;
            
            internal locationDataTable() : 
                    base("location") {
                this.InitClass();
            }
            
            internal locationDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn xColumn {
                get {
                    return this.columnx;
                }
            }
            
            internal DataColumn yColumn {
                get {
                    return this.columny;
                }
            }
            
            internal DataColumn stop_IdColumn {
                get {
                    return this.columnstop_Id;
                }
            }
            
            public locationRow this[int index] {
                get {
                    return ((locationRow)(this.Rows[index]));
                }
            }
            
            public event locationRowChangeEventHandler locationRowChanged;
            
            public event locationRowChangeEventHandler locationRowChanging;
            
            public event locationRowChangeEventHandler locationRowDeleted;
            
            public event locationRowChangeEventHandler locationRowDeleting;
            
            public void AddlocationRow(locationRow row) {
                this.Rows.Add(row);
            }
            
            public locationRow AddlocationRow(long x, long y, stopRow parentstopRowBystop_location) {
                locationRow rowlocationRow = ((locationRow)(this.NewRow()));
                rowlocationRow.ItemArray = new object[] {
                        x,
                        y,
                        parentstopRowBystop_location[2]};
                this.Rows.Add(rowlocationRow);
                return rowlocationRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                locationDataTable cln = ((locationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new locationDataTable();
            }
            
            internal void InitVars() {
                this.columnx = this.Columns["x"];
                this.columny = this.Columns["y"];
                this.columnstop_Id = this.Columns["stop_Id"];
            }
            
            private void InitClass() {
                this.columnx = new DataColumn("x", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnx);
                this.columny = new DataColumn("y", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columny);
                this.columnstop_Id = new DataColumn("stop_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnstop_Id);
                this.columnx.AllowDBNull = false;
                this.columnx.Namespace = "";
                this.columny.AllowDBNull = false;
                this.columny.Namespace = "";
            }
            
            public locationRow NewlocationRow() {
                return ((locationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new locationRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(locationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.locationRowChanged != null)) {
                    this.locationRowChanged(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.locationRowChanging != null)) {
                    this.locationRowChanging(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.locationRowDeleted != null)) {
                    this.locationRowDeleted(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.locationRowDeleting != null)) {
                    this.locationRowDeleting(this, new locationRowChangeEvent(((locationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovelocationRow(locationRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class locationRow : DataRow {
            
            private locationDataTable tablelocation;
            
            internal locationRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablelocation = ((locationDataTable)(this.Table));
            }
            
            public long x {
                get {
                    return ((long)(this[this.tablelocation.xColumn]));
                }
                set {
                    this[this.tablelocation.xColumn] = value;
                }
            }
            
            public long y {
                get {
                    return ((long)(this[this.tablelocation.yColumn]));
                }
                set {
                    this[this.tablelocation.yColumn] = value;
                }
            }
            
            public stopRow stopRow {
                get {
                    return ((stopRow)(this.GetParentRow(this.Table.ParentRelations["stop_location"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["stop_location"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class locationRowChangeEvent : EventArgs {
            
            private locationRow eventRow;
            
            private DataRowAction eventAction;
            
            public locationRowChangeEvent(locationRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public locationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class estimated_lengthDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmeters;
            
            private DataColumn columnminutes;
            
            private DataColumn columnroute_Id;
            
            internal estimated_lengthDataTable() : 
                    base("estimated_length") {
                this.InitClass();
            }
            
            internal estimated_lengthDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn metersColumn {
                get {
                    return this.columnmeters;
                }
            }
            
            internal DataColumn minutesColumn {
                get {
                    return this.columnminutes;
                }
            }
            
            internal DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            public estimated_lengthRow this[int index] {
                get {
                    return ((estimated_lengthRow)(this.Rows[index]));
                }
            }
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowChanged;
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowChanging;
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowDeleted;
            
            public event estimated_lengthRowChangeEventHandler estimated_lengthRowDeleting;
            
            public void Addestimated_lengthRow(estimated_lengthRow row) {
                this.Rows.Add(row);
            }
            
            public estimated_lengthRow Addestimated_lengthRow(long meters, long minutes, routeRow parentrouteRowByroute_estimated_length) {
                estimated_lengthRow rowestimated_lengthRow = ((estimated_lengthRow)(this.NewRow()));
                rowestimated_lengthRow.ItemArray = new object[] {
                        meters,
                        minutes,
                        parentrouteRowByroute_estimated_length[7]};
                this.Rows.Add(rowestimated_lengthRow);
                return rowestimated_lengthRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                estimated_lengthDataTable cln = ((estimated_lengthDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new estimated_lengthDataTable();
            }
            
            internal void InitVars() {
                this.columnmeters = this.Columns["meters"];
                this.columnminutes = this.Columns["minutes"];
                this.columnroute_Id = this.Columns["route_Id"];
            }
            
            private void InitClass() {
                this.columnmeters = new DataColumn("meters", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnmeters);
                this.columnminutes = new DataColumn("minutes", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnminutes);
                this.columnroute_Id = new DataColumn("route_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnroute_Id);
                this.columnmeters.AllowDBNull = false;
                this.columnmeters.Namespace = "";
                this.columnminutes.AllowDBNull = false;
                this.columnminutes.Namespace = "";
            }
            
            public estimated_lengthRow Newestimated_lengthRow() {
                return ((estimated_lengthRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new estimated_lengthRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(estimated_lengthRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.estimated_lengthRowChanged != null)) {
                    this.estimated_lengthRowChanged(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.estimated_lengthRowChanging != null)) {
                    this.estimated_lengthRowChanging(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.estimated_lengthRowDeleted != null)) {
                    this.estimated_lengthRowDeleted(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.estimated_lengthRowDeleting != null)) {
                    this.estimated_lengthRowDeleting(this, new estimated_lengthRowChangeEvent(((estimated_lengthRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeestimated_lengthRow(estimated_lengthRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class estimated_lengthRow : DataRow {
            
            private estimated_lengthDataTable tableestimated_length;
            
            internal estimated_lengthRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableestimated_length = ((estimated_lengthDataTable)(this.Table));
            }
            
            public long meters {
                get {
                    return ((long)(this[this.tableestimated_length.metersColumn]));
                }
                set {
                    this[this.tableestimated_length.metersColumn] = value;
                }
            }
            
            public long minutes {
                get {
                    return ((long)(this[this.tableestimated_length.minutesColumn]));
                }
                set {
                    this[this.tableestimated_length.minutesColumn] = value;
                }
            }
            
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_estimated_length"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_estimated_length"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class estimated_lengthRowChangeEvent : EventArgs {
            
            private estimated_lengthRow eventRow;
            
            private DataRowAction eventAction;
            
            public estimated_lengthRowChangeEvent(estimated_lengthRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public estimated_lengthRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class capacity_needDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnpassengers;
            
            private DataColumn columnwheelchairs;
            
            private DataColumn columnroute_Id;
            
            internal capacity_needDataTable() : 
                    base("capacity_need") {
                this.InitClass();
            }
            
            internal capacity_needDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn passengersColumn {
                get {
                    return this.columnpassengers;
                }
            }
            
            internal DataColumn wheelchairsColumn {
                get {
                    return this.columnwheelchairs;
                }
            }
            
            internal DataColumn route_IdColumn {
                get {
                    return this.columnroute_Id;
                }
            }
            
            public capacity_needRow this[int index] {
                get {
                    return ((capacity_needRow)(this.Rows[index]));
                }
            }
            
            public event capacity_needRowChangeEventHandler capacity_needRowChanged;
            
            public event capacity_needRowChangeEventHandler capacity_needRowChanging;
            
            public event capacity_needRowChangeEventHandler capacity_needRowDeleted;
            
            public event capacity_needRowChangeEventHandler capacity_needRowDeleting;
            
            public void Addcapacity_needRow(capacity_needRow row) {
                this.Rows.Add(row);
            }
            
            public capacity_needRow Addcapacity_needRow(long passengers, long wheelchairs, routeRow parentrouteRowByroute_capacity_need) {
                capacity_needRow rowcapacity_needRow = ((capacity_needRow)(this.NewRow()));
                rowcapacity_needRow.ItemArray = new object[] {
                        passengers,
                        wheelchairs,
                        parentrouteRowByroute_capacity_need[7]};
                this.Rows.Add(rowcapacity_needRow);
                return rowcapacity_needRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                capacity_needDataTable cln = ((capacity_needDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new capacity_needDataTable();
            }
            
            internal void InitVars() {
                this.columnpassengers = this.Columns["passengers"];
                this.columnwheelchairs = this.Columns["wheelchairs"];
                this.columnroute_Id = this.Columns["route_Id"];
            }
            
            private void InitClass() {
                this.columnpassengers = new DataColumn("passengers", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpassengers);
                this.columnwheelchairs = new DataColumn("wheelchairs", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnwheelchairs);
                this.columnroute_Id = new DataColumn("route_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnroute_Id);
            }
            
            public capacity_needRow Newcapacity_needRow() {
                return ((capacity_needRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new capacity_needRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(capacity_needRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.capacity_needRowChanged != null)) {
                    this.capacity_needRowChanged(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.capacity_needRowChanging != null)) {
                    this.capacity_needRowChanging(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.capacity_needRowDeleted != null)) {
                    this.capacity_needRowDeleted(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.capacity_needRowDeleting != null)) {
                    this.capacity_needRowDeleting(this, new capacity_needRowChangeEvent(((capacity_needRow)(e.Row)), e.Action));
                }
            }
            
            public void Removecapacity_needRow(capacity_needRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class capacity_needRow : DataRow {
            
            private capacity_needDataTable tablecapacity_need;
            
            internal capacity_needRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecapacity_need = ((capacity_needDataTable)(this.Table));
            }
            
            public long passengers {
                get {
                    try {
                        return ((long)(this[this.tablecapacity_need.passengersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecapacity_need.passengersColumn] = value;
                }
            }
            
            public long wheelchairs {
                get {
                    try {
                        return ((long)(this[this.tablecapacity_need.wheelchairsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecapacity_need.wheelchairsColumn] = value;
                }
            }
            
            public routeRow routeRow {
                get {
                    return ((routeRow)(this.GetParentRow(this.Table.ParentRelations["route_capacity_need"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["route_capacity_need"]);
                }
            }
            
            public bool IspassengersNull() {
                return this.IsNull(this.tablecapacity_need.passengersColumn);
            }
            
            public void SetpassengersNull() {
                this[this.tablecapacity_need.passengersColumn] = System.Convert.DBNull;
            }
            
            public bool IswheelchairsNull() {
                return this.IsNull(this.tablecapacity_need.wheelchairsColumn);
            }
            
            public void SetwheelchairsNull() {
                this[this.tablecapacity_need.wheelchairsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class capacity_needRowChangeEvent : EventArgs {
            
            private capacity_needRow eventRow;
            
            private DataRowAction eventAction;
            
            public capacity_needRowChangeEvent(capacity_needRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public capacity_needRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
